<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to My Portfolio on Kevin Douglas Delong - Software Engineer Portfolio</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Welcome to My Portfolio on Kevin Douglas Delong - Software Engineer Portfolio</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About Me</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/headshot.jpg&#34; alt=&#34;Profile Photo&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m Kevin Douglas Delong, a dedicated software engineer with expertise in backend (e.g., Node.js, Python) and front-end (e.g., React, Flutter) development. I build scalable web, mobile, and desktop applications, focusing on user-friendly designs and efficient code.&lt;/p&gt;&#xA;&lt;p&gt;Key Skills:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Web: HTML/CSS/JS, React, Next.js&lt;/li&gt;&#xA;&lt;li&gt;Mobile: Flutter, React Native&lt;/li&gt;&#xA;&lt;li&gt;Desktop: Electron, .NET&lt;/li&gt;&#xA;&lt;li&gt;Backend: Express, Django, databases (SQL/NoSQL)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Passionate about innovative solutions—let&amp;rsquo;s connect!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contact Me</title>
      <link>http://localhost:1313/contact/</link>
      <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contact/</guid>
      <description>&lt;p&gt;Reach out for collaborations, project inquiries, or source code access.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Email: &lt;a href=&#34;mailto:delong.kevin@gmail.com&#34;&gt;delong.kevin@gmail.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;LinkedIn: &lt;a href=&#34;https://www.linkedin.com/in/kevin-delong-50726135b/&#34;&gt;linkedin.com/in/kevin-delong&lt;/a&gt;  &lt;/li&gt;&#xA;&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/delongkevin&#34;&gt;github.com/delongkevin&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For source code requests, include details about the project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Donate</title>
      <link>http://localhost:1313/donate/</link>
      <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/donate/</guid>
      <description>&lt;p&gt;Support my open-source projects and development work!&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;Find me on Venmo!  &lt;a href=&#34;https://account.venmo.com/u/KDelong147&#34;&gt;https://account.venmo.com/u/KDelong147&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projects</title>
      <link>http://localhost:1313/projects/</link>
      <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/</guid>
      <description>&lt;p&gt;Explore my portfolio of web, mobile, and desktop applications. Each includes a demo embed and source code access (request permission via contact).&lt;/p&gt;&#xA;&lt;h3 id=&#34;scientific-calculator-web-app&#34;&gt;Scientific Calculator Web App!&lt;/h3&gt;&#xA;&lt;iframe src=&#34;http://localhost:1313/calculator/index.html&#34; width=&#34;100%&#34; height=&#34;400px&#34; frameborder=&#34;0&#34; allowfullscreen style=&#34;border-radius: 8px;&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;h3 id=&#34;tic-tac-toe-game&#34;&gt;Tic Tac Toe Game&lt;/h3&gt;&#xA;&lt;iframe src=&#34;http://localhost:1313/tictactoe.html&#34; width=&#34;100%&#34; height=&#34;600px&#34; frameborder=&#34;0&#34; allowfullscreen style=&#34;border-radius: 8px;&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&#xA;&lt;h3 id=&#34;blackjack-game&#34;&gt;Blackjack Game&lt;/h3&gt;&#xA;&lt;iframe src=&#34;http://localhost:1313/blackjack.html&#34; width=&#34;100%&#34; height=&#34;800px&#34; frameborder=&#34;0&#34; allowfullscreen style=&#34;border-radius: 8px;&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;h3 id=&#34;circle-clicker&#34;&gt;Circle Clicker&lt;/h3&gt;&#xA;&#xA;&lt;iframe src=&#34;circle_clicker.html&#34; width=&#34;100%&#34; height=&#34;600&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;h3 id=&#34;color-match&#34;&gt;Color Match&lt;/h3&gt;&#xA;&#xA;&lt;iframe src=&#34;color-match.html&#34; width=&#34;100%&#34; height=&#34;600&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;p&gt;GitHub: &lt;a href=&#34;http://localhost:1313/contact/&#34;&gt;Request Source Code&lt;/a&gt;&#xA;More projects to come :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Resume</title>
      <link>http://localhost:1313/resume/</link>
      <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/resume/</guid>
      <description>&lt;p&gt;Download my latest resume and cover letter (updated September 13, 2025).&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/resume/resume.pdf&#34;&gt;Resume PDF&lt;/a&gt;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Results-oriented Software Engineer with 10+ years in automotive infotainment systems, specializing in backend automation, frontend UI development, and full-stack integration for web, mobile, and embedded applications. Proven track record in C++, Python, and AutoSAR architecture, collaborating on CI/CD pipelines to deliver high-quality, secure software. Excel at debugging complex SOC/IOC issues, fuzz testing protocols (CAN/Ethernet), and leading cross-functional teams to exceed milestones—reducing defects by 25% through optimized test automation. Eager to drive innovative solutions in scalable software environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/blackjack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blackjack/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xD;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xD;&#xA;&lt;head&gt;&#xD;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xD;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;&#xD;&#xA;    &lt;title&gt;Blackjack Game&lt;/title&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/react@18/umd/react.development.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/react-dom@18/umd/react-dom.development.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/@babel/standalone/babel.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;style&gt;&#xD;&#xA;        * {&#xD;&#xA;            margin: 0;&#xD;&#xA;            padding: 0;&#xD;&#xA;            box-sizing: border-box;&#xD;&#xA;            font-family: &#39;Segoe UI&#39;, Tahoma, Geneva, Verdana, sans-serif;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        body {&#xD;&#xA;            background: linear-gradient(135deg, #2c3e50 0%, #1a1a1a 100%);&#xD;&#xA;            min-height: 100vh;&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            align-items: center;&#xD;&#xA;            padding: 20px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        #root {&#xD;&#xA;            width: 100%;&#xD;&#xA;            max-width: 600px;&#xD;&#xA;            margin: 0 auto;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .game-container {&#xD;&#xA;            background: rgba(35, 35, 35, 0.95);&#xD;&#xA;            border-radius: 12px;&#xD;&#xA;            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);&#xD;&#xA;            padding: 25px;&#xD;&#xA;            text-align: center;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        h1 {&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            margin-bottom: 20px;&#xD;&#xA;            font-size: 2.2rem;&#xD;&#xA;            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);&#xD;&#xA;            font-weight: 300;&#xD;&#xA;            letter-spacing: 1px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-board {&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: space-around;&#xD;&#xA;            margin-bottom: 20px;&#xD;&#xA;            padding: 15px;&#xD;&#xA;            background: rgba(50, 50, 50, 0.8);&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score {&#xD;&#xA;            font-size: 1.1rem;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-wins {&#xD;&#xA;            color: #7a9fff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-losses {&#xD;&#xA;            color: #ff7a7a;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-pushes {&#xD;&#xA;            color: #dddddd;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .hands-container {&#xD;&#xA;            display: flex;&#xD;&#xA;            flex-direction: column;&#xD;&#xA;            gap: 30px;&#xD;&#xA;            margin-bottom: 25px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .hand {&#xD;&#xA;            display: flex;&#xD;&#xA;            flex-direction: column;&#xD;&#xA;            align-items: center;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .hand-title {&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            font-size: 1.2rem;&#xD;&#xA;            margin-bottom: 10px;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .cards {&#xD;&#xA;            display: flex;&#xD;&#xA;            flex-wrap: wrap;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            gap: 10px;&#xD;&#xA;            min-height: 150px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .card {&#xD;&#xA;            width: 80px;&#xD;&#xA;            height: 120px;&#xD;&#xA;            background: #2a2a2a;&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            display: flex;&#xD;&#xA;            flex-direction: column;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            align-items: center;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);&#xD;&#xA;            position: relative;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .card-value {&#xD;&#xA;            font-size: 1.5rem;&#xD;&#xA;            font-weight: bold;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .card-suit {&#xD;&#xA;            font-size: 1.8rem;&#xD;&#xA;            margin-top: 5px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .heart, .diamond {&#xD;&#xA;            color: #ff7a7a;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .spade, .club {&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .hand-total {&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            font-size: 1.1rem;&#xD;&#xA;            margin-top: 10px;&#xD;&#xA;            background: rgba(50, 50, 50, 0.8);&#xD;&#xA;            padding: 5px 15px;&#xD;&#xA;            border-radius: 20px;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .message {&#xD;&#xA;            font-size: 1.3rem;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            margin: 20px 0;&#xD;&#xA;            padding: 12px;&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            background: rgba(50, 50, 50, 0.8);&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            min-height: 60px;&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            align-items: center;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .controls {&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            gap: 15px;&#xD;&#xA;            margin-bottom: 20px;&#xD;&#xA;            flex-wrap: wrap;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn {&#xD;&#xA;            background: linear-gradient(145deg, #3a3a3a, #2a2a2a);&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            border-radius: 6px;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            cursor: pointer;&#xD;&#xA;            font-size: 1rem;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;            padding: 12px 25px;&#xD;&#xA;            transition: all 0.3s ease;&#xD;&#xA;            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);&#xD;&#xA;            min-width: 120px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn:hover {&#xD;&#xA;            transform: translateY(-2px);&#xD;&#xA;            box-shadow: 0 5px 12px rgba(0, 0, 0, 0.3);&#xD;&#xA;            background: linear-gradient(145deg, #444, #333);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn:active {&#xD;&#xA;            transform: translateY(1px);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn-hit {&#xD;&#xA;            background: linear-gradient(145deg, #2a7a2a, #1f5e1f);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn-stand {&#xD;&#xA;            background: linear-gradient(145deg, #7a2a2a, #5e1f1f);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn-deal {&#xD;&#xA;            background: linear-gradient(145deg, #2a2a7a, #1f1f5e);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .instructions {&#xD;&#xA;            color: #cccccc;&#xD;&#xA;            font-size: 0.9rem;&#xD;&#xA;            margin-top: 25px;&#xD;&#xA;            padding: 15px;&#xD;&#xA;            border-top: 1px solid #555;&#xD;&#xA;            text-align: left;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .instructions h3 {&#xD;&#xA;            margin-bottom: 10px;&#xD;&#xA;            color: #7a9fff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .instructions ul {&#xD;&#xA;            padding-left: 20px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .instructions li {&#xD;&#xA;            margin-bottom: 5px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        @media (max-width: 500px) {&#xD;&#xA;            .card {&#xD;&#xA;                width: 70px;&#xD;&#xA;                height: 105px;&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            .btn {&#xD;&#xA;                padding: 10px 15px;&#xD;&#xA;                min-width: 100px;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &lt;/style&gt;&#xD;&#xA;&lt;/head&gt;&#xD;&#xA;&lt;body&gt;&#xD;&#xA;    &lt;div id=&#34;root&#34;&gt;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;    &lt;script type=&#34;text/babel&#34;&gt;&#xD;&#xA;        const { useState, useEffect } = React;&#xD;&#xA;&#xD;&#xA;        const Card = ({ suit, value, hidden }) =&gt; {&#xD;&#xA;            if (hidden) {&#xD;&#xA;                return (&#xD;&#xA;                    &lt;div className=&#34;card&#34;&gt;&#xD;&#xA;                        &lt;div style={{ &#xD;&#xA;                            width: &#39;100%&#39;, &#xD;&#xA;                            height: &#39;100%&#39;, &#xD;&#xA;                            background: &#39;linear-gradient(145deg, #1a1a1a, #2a2a2a)&#39;,&#xD;&#xA;                            borderRadius: &#39;7px&#39;,&#xD;&#xA;                            display: &#39;flex&#39;,&#xD;&#xA;                            justifyContent: &#39;center&#39;,&#xD;&#xA;                            alignItems: &#39;center&#39;&#xD;&#xA;                        }}&gt;&#xD;&#xA;                            &lt;div style={{&#xD;&#xA;                                width: &#39;50%&#39;,&#xD;&#xA;                                height: &#39;50%&#39;,&#xD;&#xA;                                background: &#39;#333&#39;,&#xD;&#xA;                                borderRadius: &#39;5px&#39;,&#xD;&#xA;                                border: &#39;2px solid #555&#39;&#xD;&#xA;                            }}&gt;&lt;/div&gt;&#xD;&#xA;                        &lt;/div&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                );&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return (&#xD;&#xA;                &lt;div className=&#34;card&#34;&gt;&#xD;&#xA;                    &lt;div className={`card-value ${suit}`}&gt;{value}&lt;/div&gt;&#xD;&#xA;                    &lt;div className={`card-suit ${suit}`}&gt;&#xD;&#xA;                        {suit === &#39;heart&#39; ? &#39;♥&#39; : &#xD;&#xA;                         suit === &#39;diamond&#39; ? &#39;♦&#39; : &#xD;&#xA;                         suit === &#39;club&#39; ? &#39;♣&#39; : &#39;♠&#39;}&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            );&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        const Hand = ({ cards, title, total, isDealer }) =&gt; {&#xD;&#xA;            return (&#xD;&#xA;                &lt;div className=&#34;hand&#34;&gt;&#xD;&#xA;                    &lt;div className=&#34;hand-title&#34;&gt;{title}&lt;/div&gt;&#xD;&#xA;                    &lt;div className=&#34;cards&#34;&gt;&#xD;&#xA;                        {cards.map((card, index) =&gt; (&#xD;&#xA;                            &lt;Card &#xD;&#xA;                                key={index} &#xD;&#xA;                                suit={card.suit} &#xD;&#xA;                                value={card.value} &#xD;&#xA;                                hidden={isDealer &amp;&amp; index === 0 &amp;&amp; total === 0}&#xD;&#xA;                            /&gt;&#xD;&#xA;                        ))}&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    {total &gt; 0 &amp;&amp; (&#xD;&#xA;                        &lt;div className=&#34;hand-total&#34;&gt;Total: {total}&lt;/div&gt;&#xD;&#xA;                    )}&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            );&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        const BlackjackGame = () =&gt; {&#xD;&#xA;            const [deck, setDeck] = useState([]);&#xD;&#xA;            const [playerHand, setPlayerHand] = useState([]);&#xD;&#xA;            const [dealerHand, setDealerHand] = useState([]);&#xD;&#xA;            const [playerTotal, setPlayerTotal] = useState(0);&#xD;&#xA;            const [dealerTotal, setDealerTotal] = useState(0);&#xD;&#xA;            const [gameStatus, setGameStatus] = useState(&#39;waiting&#39;); // waiting, player-turn, dealer-turn, win, lose, push&#xD;&#xA;            const [message, setMessage] = useState(&#39;Place your bet and deal cards&#39;);&#xD;&#xA;            const [score, setScore] = useState({ wins: 0, losses: 0, pushes: 0 });&#xD;&#xA;&#xD;&#xA;            // Initialize a deck of cards&#xD;&#xA;            const initializeDeck = () =&gt; {&#xD;&#xA;                const suits = [&#39;heart&#39;, &#39;diamond&#39;, &#39;club&#39;, &#39;spade&#39;];&#xD;&#xA;                const values = [&#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;J&#39;, &#39;Q&#39;, &#39;K&#39;, &#39;A&#39;];&#xD;&#xA;                const newDeck = [];&#xD;&#xA;                &#xD;&#xA;                for (let suit of suits) {&#xD;&#xA;                    for (let value of values) {&#xD;&#xA;                        newDeck.push({ suit, value });&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                &#xD;&#xA;                return shuffleDeck(newDeck);&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Shuffle the deck using Fisher-Yates algorithm&#xD;&#xA;            const shuffleDeck = (deck) =&gt; {&#xD;&#xA;                const newDeck = [...deck];&#xD;&#xA;                for (let i = newDeck.length - 1; i &gt; 0; i--) {&#xD;&#xA;                    const j = Math.floor(Math.random() * (i + 1));&#xD;&#xA;                    [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];&#xD;&#xA;                }&#xD;&#xA;                return newDeck;&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Calculate the total value of a hand&#xD;&#xA;            const calculateTotal = (hand) =&gt; {&#xD;&#xA;                let total = 0;&#xD;&#xA;                let aces = 0;&#xD;&#xA;                &#xD;&#xA;                for (let card of hand) {&#xD;&#xA;                    if (card.value === &#39;A&#39;) {&#xD;&#xA;                        aces += 1;&#xD;&#xA;                        total += 11;&#xD;&#xA;                    } else if ([&#39;K&#39;, &#39;Q&#39;, &#39;J&#39;].includes(card.value)) {&#xD;&#xA;                        total += 10;&#xD;&#xA;                    } else {&#xD;&#xA;                        total += parseInt(card.value);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                &#xD;&#xA;                // Adjust for aces&#xD;&#xA;                while (total &gt; 21 &amp;&amp; aces &gt; 0) {&#xD;&#xA;                    total -= 10;&#xD;&#xA;                    aces -= 1;&#xD;&#xA;                }&#xD;&#xA;                &#xD;&#xA;                return total;&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Deal initial cards&#xD;&#xA;            const dealCards = () =&gt; {&#xD;&#xA;                const newDeck = initializeDeck();&#xD;&#xA;                const playerCards = [newDeck.pop(), newDeck.pop()];&#xD;&#xA;                const dealerCards = [newDeck.pop(), newDeck.pop()];&#xD;&#xA;                &#xD;&#xA;                setDeck(newDeck);&#xD;&#xA;                setPlayerHand(playerCards);&#xD;&#xA;                setDealerHand(dealerCards);&#xD;&#xA;                &#xD;&#xA;                const playerTotalValue = calculateTotal(playerCards);&#xD;&#xA;                const dealerTotalValue = calculateTotal([dealerCards[0]]); // Only show first card for dealer&#xD;&#xA;                &#xD;&#xA;                setPlayerTotal(playerTotalValue);&#xD;&#xA;                setDealerTotal(dealerTotalValue);&#xD;&#xA;                setGameStatus(&#39;player-turn&#39;);&#xD;&#xA;                setMessage(&#39;Your turn! Hit or Stand?&#39;);&#xD;&#xA;                &#xD;&#xA;                // Check for blackjack&#xD;&#xA;                if (playerTotalValue === 21) {&#xD;&#xA;                    setTimeout(stand, 1000);&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Player draws a card&#xD;&#xA;            const hit = () =&gt; {&#xD;&#xA;                if (gameStatus !== &#39;player-turn&#39;) return;&#xD;&#xA;                &#xD;&#xA;                const newDeck = [...deck];&#xD;&#xA;                const newCard = newDeck.pop();&#xD;&#xA;                const newPlayerHand = [...playerHand, newCard];&#xD;&#xA;                const newPlayerTotal = calculateTotal(newPlayerHand);&#xD;&#xA;                &#xD;&#xA;                setDeck(newDeck);&#xD;&#xA;                setPlayerHand(newPlayerHand);&#xD;&#xA;                setPlayerTotal(newPlayerTotal);&#xD;&#xA;                &#xD;&#xA;                if (newPlayerTotal &gt; 21) {&#xD;&#xA;                    setGameStatus(&#39;lose&#39;);&#xD;&#xA;                    setMessage(&#39;Busted! You lose.&#39;);&#xD;&#xA;                    setScore({ ...score, losses: score.losses + 1 });&#xD;&#xA;                } else if (newPlayerTotal === 21) {&#xD;&#xA;                    setTimeout(stand, 500);&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Player ends their turn&#xD;&#xA;            const stand = () =&gt; {&#xD;&#xA;                if (gameStatus !== &#39;player-turn&#39;) return;&#xD;&#xA;                &#xD;&#xA;                setGameStatus(&#39;dealer-turn&#39;);&#xD;&#xA;                setMessage(&#34;Dealer&#39;s turn&#34;);&#xD;&#xA;                &#xD;&#xA;                // Reveal dealer&#39;s hidden card after a short delay&#xD;&#xA;                setTimeout(() =&gt; {&#xD;&#xA;                    const newDealerTotal = calculateTotal(dealerHand);&#xD;&#xA;                    setDealerTotal(newDealerTotal);&#xD;&#xA;                    &#xD;&#xA;                    let currentDeck = [...deck];&#xD;&#xA;                    let currentDealerHand = [...dealerHand];&#xD;&#xA;                    let currentDealerTotal = newDealerTotal;&#xD;&#xA;                    &#xD;&#xA;                    // Dealer draws until they have at least 17&#xD;&#xA;                    const dealerDraw = () =&gt; {&#xD;&#xA;                        if (currentDealerTotal &lt; 17) {&#xD;&#xA;                            setTimeout(() =&gt; {&#xD;&#xA;                                const newCard = currentDeck.pop();&#xD;&#xA;                                currentDealerHand.push(newCard);&#xD;&#xA;                                currentDealerTotal = calculateTotal(currentDealerHand);&#xD;&#xA;                                &#xD;&#xA;                                setDeck(currentDeck);&#xD;&#xA;                                setDealerHand(currentDealerHand);&#xD;&#xA;                                setDealerTotal(currentDealerTotal);&#xD;&#xA;                                &#xD;&#xA;                                dealerDraw();&#xD;&#xA;                            }, 800);&#xD;&#xA;                        } else {&#xD;&#xA;                            // Determine winner after dealer finishes drawing&#xD;&#xA;                            setTimeout(determineWinner, 500);&#xD;&#xA;                        }&#xD;&#xA;                    };&#xD;&#xA;                    &#xD;&#xA;                    dealerDraw();&#xD;&#xA;                }, 800);&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Determine the winner&#xD;&#xA;            const determineWinner = () =&gt; {&#xD;&#xA;                if (dealerTotal &gt; 21) {&#xD;&#xA;                    setGameStatus(&#39;win&#39;);&#xD;&#xA;                    setMessage(&#39;Dealer busts! You win!&#39;);&#xD;&#xA;                    setScore({ ...score, wins: score.wins + 1 });&#xD;&#xA;                } else if (dealerTotal &gt; playerTotal) {&#xD;&#xA;                    setGameStatus(&#39;lose&#39;);&#xD;&#xA;                    setMessage(&#39;Dealer wins!&#39;);&#xD;&#xA;                    setScore({ ...score, losses: score.losses + 1 });&#xD;&#xA;                } else if (dealerTotal &lt; playerTotal) {&#xD;&#xA;                    setGameStatus(&#39;win&#39;);&#xD;&#xA;                    setMessage(&#39;You win!&#39;);&#xD;&#xA;                    setScore({ ...score, wins: score.wins + 1 });&#xD;&#xA;                } else {&#xD;&#xA;                    setGameStatus(&#39;push&#39;);&#xD;&#xA;                    setMessage(&#34;It&#39;s a push!&#34;);&#xD;&#xA;                    setScore({ ...score, pushes: score.pushes + 1 });&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Start a new game&#xD;&#xA;            const newGame = () =&gt; {&#xD;&#xA;                setPlayerHand([]);&#xD;&#xA;                setDealerHand([]);&#xD;&#xA;                setPlayerTotal(0);&#xD;&#xA;                setDealerTotal(0);&#xD;&#xA;                setGameStatus(&#39;waiting&#39;);&#xD;&#xA;                setMessage(&#39;Place your bet and deal cards&#39;);&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            return (&#xD;&#xA;                &lt;div className=&#34;game-container&#34;&gt;&#xD;&#xA;                    &lt;h1&gt;Blackjack&lt;/h1&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;score-board&#34;&gt;&#xD;&#xA;                        &lt;div className=&#34;score score-wins&#34;&gt;Wins: {score.wins}&lt;/div&gt;&#xD;&#xA;                        &lt;div className=&#34;score score-losses&#34;&gt;Losses: {score.losses}&lt;/div&gt;&#xD;&#xA;                        &lt;div className=&#34;score score-pushes&#34;&gt;Pushes: {score.pushes}&lt;/div&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;hands-container&#34;&gt;&#xD;&#xA;                        &lt;Hand &#xD;&#xA;                            cards={dealerHand} &#xD;&#xA;                            title=&#34;Dealer&#34; &#xD;&#xA;                            total={gameStatus !== &#39;player-turn&#39; ? dealerTotal : 0}&#xD;&#xA;                            isDealer={gameStatus === &#39;player-turn&#39;}&#xD;&#xA;                        /&gt;&#xD;&#xA;                        &#xD;&#xA;                        &lt;Hand &#xD;&#xA;                            cards={playerHand} &#xD;&#xA;                            title=&#34;Player&#34; &#xD;&#xA;                            total={playerTotal}&#xD;&#xA;                            isDealer={false}&#xD;&#xA;                        /&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;message&#34;&gt;{message}&lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;controls&#34;&gt;&#xD;&#xA;                        {gameStatus === &#39;waiting&#39; ? (&#xD;&#xA;                            &lt;button className=&#34;btn btn-deal&#34; onClick={dealCards}&gt;&#xD;&#xA;                                Deal Cards&#xD;&#xA;                            &lt;/button&gt;&#xD;&#xA;                        ) : gameStatus === &#39;player-turn&#39; ? (&#xD;&#xA;                            &lt;&gt;&#xD;&#xA;                                &lt;button className=&#34;btn btn-hit&#34; onClick={hit}&gt;&#xD;&#xA;                                    Hit&#xD;&#xA;                                &lt;/button&gt;&#xD;&#xA;                                &lt;button className=&#34;btn btn-stand&#34; onClick={stand}&gt;&#xD;&#xA;                                    Stand&#xD;&#xA;                                &lt;/button&gt;&#xD;&#xA;                            &lt;/&gt;&#xD;&#xA;                        ) : (&#xD;&#xA;                            &lt;button className=&#34;btn btn-deal&#34; onClick={newGame}&gt;&#xD;&#xA;                                New Game&#xD;&#xA;                            &lt;/button&gt;&#xD;&#xA;                        )}&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;instructions&#34;&gt;&#xD;&#xA;                        &lt;h3&gt;How to Play:&lt;/h3&gt;&#xD;&#xA;                        &lt;ul&gt;&#xD;&#xA;                            &lt;li&gt;Try to get as close to 21 as possible without going over&lt;/li&gt;&#xD;&#xA;                            &lt;li&gt;Dealer must hit until they reach at least 17&lt;/li&gt;&#xD;&#xA;                            &lt;li&gt;Aces count as 1 or 11&lt;/li&gt;&#xD;&#xA;                            &lt;li&gt;Face cards (J, Q, K) are worth 10&lt;/li&gt;&#xD;&#xA;                        &lt;/ul&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            );&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        ReactDOM.createRoot(document.getElementById(&#39;root&#39;)).render(&lt;BlackjackGame /&gt;);&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/body&gt;&#xD;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/blackjack_embed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blackjack_embed/</guid>
      <description>&lt;iframe &#xD;&#xA;    src=&#34;blackjack.html&#34; &#xD;&#xA;    width=&#34;650&#34; &#xD;&#xA;    height=&#34;800&#34; &#xD;&#xA;    frameborder=&#34;0&#34;&#xD;&#xA;    style=&#34;border: none; border-radius: 12px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);&#34;&#xD;&#xA;    allowfullscreen&gt;&#xD;&#xA;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/circle_clicker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/circle_clicker/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;&#xA;    &lt;title&gt;Quick Reflex: Circle Clicker&lt;/title&gt;&#xA;    &lt;style&gt;&#xA;        * {&#xA;            margin: 0;&#xA;            padding: 0;&#xA;            box-sizing: border-box;&#xA;            font-family: &#39;Segoe UI&#39;, Tahoma, Geneva, Verdana, sans-serif;&#xA;        }&#xA;        &#xA;        body {&#xA;            display: flex;&#xA;            justify-content: center;&#xA;            align-items: center;&#xA;            min-height: 100vh;&#xA;            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);&#xA;            padding: 20px;&#xA;            overflow: hidden;&#xA;        }&#xA;        &#xA;        .game-container {&#xA;            background-color: rgba(255, 255, 255, 0.95);&#xA;            border-radius: 20px;&#xA;            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);&#xA;            padding: 30px;&#xA;            max-width: 800px;&#xA;            width: 100%;&#xA;            text-align: center;&#xA;            position: relative;&#xA;            overflow: hidden;&#xA;        }&#xA;        &#xA;        h1 {&#xA;            color: #333;&#xA;            margin-bottom: 15px;&#xA;            font-size: 2.8rem;&#xA;            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);&#xA;            background: linear-gradient(to right, #6a11cb, #2575fc);&#xA;            -webkit-background-clip: text;&#xA;            -webkit-text-fill-color: transparent;&#xA;        }&#xA;        &#xA;        .game-info {&#xA;            display: flex;&#xA;            justify-content: space-around;&#xA;            margin-bottom: 20px;&#xA;            font-size: 1.3rem;&#xA;            font-weight: bold;&#xA;            background: linear-gradient(to right, #f5f7fa, #c3cfe2);&#xA;            padding: 15px;&#xA;            border-radius: 15px;&#xA;            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);&#xA;        }&#xA;        &#xA;        .info-item {&#xA;            display: flex;&#xA;            flex-direction: column;&#xA;            align-items: center;&#xA;        }&#xA;        &#xA;        .info-value {&#xA;            font-size: 2rem;&#xA;            color: #6a11cb;&#xA;            margin-top: 5px;&#xA;        }&#xA;        &#xA;        .game-area {&#xA;            height: 400px;&#xA;            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);&#xA;            border-radius: 15px;&#xA;            margin: 20px 0;&#xA;            position: relative;&#xA;            overflow: hidden;&#xA;            box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.1);&#xA;            border: 3px solid #e0e6f0;&#xA;        }&#xA;        &#xA;        .target {&#xA;            position: absolute;&#xA;            border-radius: 50%;&#xA;            cursor: pointer;&#xA;            transition: transform 0.1s;&#xA;            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);&#xA;            background: radial-gradient(circle at 30% 30%, #ff9a9e, #fad0c4);&#xA;            display: flex;&#xA;            justify-content: center;&#xA;            align-items: center;&#xA;            color: white;&#xA;            font-weight: bold;&#xA;            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);&#xA;        }&#xA;        &#xA;        .target:hover {&#xA;            transform: scale(1.05);&#xA;        }&#xA;        &#xA;        .target:active {&#xA;            transform: scale(0.95);&#xA;        }&#xA;        &#xA;        .controls {&#xA;            margin-top: 20px;&#xA;            display: flex;&#xA;            justify-content: center;&#xA;            gap: 15px;&#xA;        }&#xA;        &#xA;        button {&#xA;            background: linear-gradient(to right, #6a11cb, #2575fc);&#xA;            border: none;&#xA;            color: white;&#xA;            padding: 14px 35px;&#xA;            text-align: center;&#xA;            text-decoration: none;&#xA;            font-size: 1.1rem;&#xA;            font-weight: bold;&#xA;            cursor: pointer;&#xA;            border-radius: 50px;&#xA;            transition: all 0.3s;&#xA;            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);&#xA;            letter-spacing: 1px;&#xA;        }&#xA;        &#xA;        button:hover {&#xA;            transform: translateY(-3px);&#xA;            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);&#xA;        }&#xA;        &#xA;        button:active {&#xA;            transform: translateY(1px);&#xA;        }&#xA;        &#xA;        button:disabled {&#xA;            background: linear-gradient(to right, #cccccc, #999999);&#xA;            cursor: not-allowed;&#xA;            transform: none;&#xA;            box-shadow: none;&#xA;        }&#xA;        &#xA;        #start-btn {&#xA;            background: linear-gradient(to right, #00b09b, #96c93d);&#xA;        }&#xA;        &#xA;        #reset-btn {&#xA;            background: linear-gradient(to right, #ff5e62, #ff9966);&#xA;        }&#xA;        &#xA;        .message {&#xA;            font-size: 1.5rem;&#xA;            font-weight: bold;&#xA;            margin: 20px 0;&#xA;            min-height: 40px;&#xA;            padding: 10px;&#xA;            border-radius: 10px;&#xA;            transition: all 0.3s;&#xA;        }&#xA;        &#xA;        .game-start {&#xA;            color: #00b09b;&#xA;            background-color: rgba(0, 176, 155, 0.1);&#xA;        }&#xA;        &#xA;        .correct {&#xA;            color: #00b09b;&#xA;            background-color: rgba(0, 176, 155, 0.1);&#xA;        }&#xA;        &#xA;        .game-over {&#xA;            font-size: 2.2rem;&#xA;            color: #ff5e62;&#xA;            background-color: rgba(255, 94, 98, 0.1);&#xA;            padding: 15px;&#xA;            margin: 20px 0;&#xA;        }&#xA;        &#xA;        .instructions {&#xA;            background: linear-gradient(to right, #f5f7fa, #c3cfe2);&#xA;            padding: 20px;&#xA;            border-radius: 15px;&#xA;            margin-top: 25px;&#xA;            text-align: left;&#xA;            font-size: 1rem;&#xA;            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);&#xA;        }&#xA;        &#xA;        .instructions h3 {&#xA;            color: #6a11cb;&#xA;            margin-bottom: 10px;&#xA;            text-align: center;&#xA;        }&#xA;        &#xA;        .instructions ul {&#xA;            padding-left: 20px;&#xA;        }&#xA;        &#xA;        .instructions li {&#xA;            margin-bottom: 8px;&#xA;        }&#xA;        &#xA;        .combo {&#xA;            position: absolute;&#xA;            font-size: 2rem;&#xA;            font-weight: bold;&#xA;            color: #ff5e62;&#xA;            animation: floatUp 1s ease-out forwards;&#xA;            pointer-events: none;&#xA;        }&#xA;        &#xA;        @keyframes floatUp {&#xA;            0% {&#xA;                opacity: 1;&#xA;                transform: translateY(0);&#xA;            }&#xA;            100% {&#xA;                opacity: 0;&#xA;                transform: translateY(-50px);&#xA;            }&#xA;        }&#xA;        &#xA;        @media (max-width: 600px) {&#xA;            h1 {&#xA;                font-size: 2.2rem;&#xA;            }&#xA;            &#xA;            .game-info {&#xA;                flex-direction: column;&#xA;                gap: 10px;&#xA;            }&#xA;            &#xA;            .game-area {&#xA;                height: 300px;&#xA;            }&#xA;            &#xA;            .controls {&#xA;                flex-direction: column;&#xA;                align-items: center;&#xA;            }&#xA;            &#xA;            button {&#xA;                width: 80%;&#xA;            }&#xA;        }&#xA;    &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;div class=&#34;game-container&#34;&gt;&#xA;        &lt;h1&gt;Quick Reflex: Circle Clicker&lt;/h1&gt;&#xA;        &#xA;        &lt;div class=&#34;game-info&#34;&gt;&#xA;            &lt;div class=&#34;info-item&#34;&gt;&#xA;                &lt;div&gt;Score&lt;/div&gt;&#xA;                &lt;div class=&#34;info-value&#34; id=&#34;score&#34;&gt;0&lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;            &lt;div class=&#34;info-item&#34;&gt;&#xA;                &lt;div&gt;Time&lt;/div&gt;&#xA;                &lt;div class=&#34;info-value&#34; id=&#34;time&#34;&gt;30&lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;            &lt;div class=&#34;info-item&#34;&gt;&#xA;                &lt;div&gt;Level&lt;/div&gt;&#xA;                &lt;div class=&#34;info-value&#34; id=&#34;level&#34;&gt;1&lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;            &lt;div class=&#34;info-item&#34;&gt;&#xA;                &lt;div&gt;Combo&lt;/div&gt;&#xA;                &lt;div class=&#34;info-value&#34; id=&#34;combo&#34;&gt;1x&lt;/div&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;div class=&#34;message&#34; id=&#34;message&#34;&gt;Click Start to begin the game!&lt;/div&gt;&#xA;        &#xA;        &lt;div class=&#34;game-area&#34; id=&#34;game-area&#34;&gt;&#xA;            &lt;!-- Circles will be generated here --&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;div class=&#34;controls&#34;&gt;&#xA;            &lt;button id=&#34;start-btn&#34;&gt;Start Game&lt;/button&gt;&#xA;            &lt;button id=&#34;reset-btn&#34;&gt;Reset Game&lt;/button&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;div class=&#34;instructions&#34;&gt;&#xA;            &lt;h3&gt;How to Play:&lt;/h3&gt;&#xA;            &lt;ul&gt;&#xA;                &lt;li&gt;Click on the circles as quickly as possible before they disappear&lt;/li&gt;&#xA;                &lt;li&gt;Each circle gives you points based on its size and your current combo&lt;/li&gt;&#xA;                &lt;li&gt;Smaller circles are worth more points but harder to click&lt;/li&gt;&#xA;                &lt;li&gt;Click circles consecutively to build your combo multiplier&lt;/li&gt;&#xA;                &lt;li&gt;The game gets faster as you level up!&lt;/li&gt;&#xA;            &lt;/ul&gt;&#xA;        &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;script&gt;&#xA;        // Game variables&#xA;        let score = 0;&#xA;        let timeLeft = 30;&#xA;        let level = 1;&#xA;        let gameActive = false;&#xA;        let timer;&#xA;        let circleInterval;&#xA;        let combo = 1;&#xA;        let circlesClicked = 0;&#xA;        let circlesMissed = 0;&#xA;        &#xA;        // DOM elements&#xA;        const scoreElement = document.getElementById(&#39;score&#39;);&#xA;        const timeElement = document.getElementById(&#39;time&#39;);&#xA;        const levelElement = document.getElementById(&#39;level&#39;);&#xA;        const comboElement = document.getElementById(&#39;combo&#39;);&#xA;        const gameArea = document.getElementById(&#39;game-area&#39;);&#xA;        const messageElement = document.getElementById(&#39;message&#39;);&#xA;        const startButton = document.getElementById(&#39;start-btn&#39;);&#xA;        const resetButton = document.getElementById(&#39;reset-btn&#39;);&#xA;        &#xA;        // Initialize the game&#xA;        function initGame() {&#xA;            score = 0;&#xA;            timeLeft = 30;&#xA;            level = 1;&#xA;            gameActive = false;&#xA;            combo = 1;&#xA;            circlesClicked = 0;&#xA;            circlesMissed = 0;&#xA;            &#xA;            scoreElement.textContent = score;&#xA;            timeElement.textContent = timeLeft;&#xA;            levelElement.textContent = level;&#xA;            comboElement.textContent = combo + &#39;x&#39;;&#xA;            messageElement.textContent = &#39;Click Start to begin the game!&#39;;&#xA;            messageElement.className = &#39;message&#39;;&#xA;            &#xA;            clearInterval(timer);&#xA;            clearInterval(circleInterval);&#xA;            gameArea.innerHTML = &#39;&#39;;&#xA;            &#xA;            startButton.disabled = false;&#xA;        }&#xA;        &#xA;        // Create a new circle&#xA;        function createCircle() {&#xA;            if (!gameActive) return;&#xA;            &#xA;            const circle = document.createElement(&#39;div&#39;);&#xA;            circle.className = &#39;target&#39;;&#xA;            &#xA;            // Random size based on level (smaller circles are harder to click)&#xA;            const minSize = Math.max(40, 70 - level * 5);&#xA;            const maxSize = Math.max(60, 90 - level * 5);&#xA;            const size = Math.floor(Math.random() * (maxSize - minSize + 1)) + minSize;&#xA;            &#xA;            circle.style.width = `${size}px`;&#xA;            circle.style.height = `${size}px`;&#xA;            &#xA;            // Random position within game area&#xA;            const maxX = gameArea.offsetWidth - size;&#xA;            const maxY = gameArea.offsetHeight - size;&#xA;            const x = Math.floor(Math.random() * maxX);&#xA;            const y = Math.floor(Math.random() * maxY);&#xA;            &#xA;            circle.style.left = `${x}px`;&#xA;            circle.style.top = `${y}px`;&#xA;            &#xA;            // Points based on size (smaller circles = more points)&#xA;            const points = Math.floor(100 / (size / 50)) * combo;&#xA;            circle.dataset.points = points;&#xA;            &#xA;            // Display points on circle&#xA;            circle.textContent = points;&#xA;            &#xA;            // Random color gradient&#xA;            const color1 = `hsl(${Math.random() * 360}, 70%, 65%)`;&#xA;            const color2 = `hsl(${Math.random() * 360}, 70%, 55%)`;&#xA;            circle.style.background = `radial-gradient(circle at 30% 30%, ${color1}, ${color2})`;&#xA;            &#xA;            // Circle disappears after a time based on level&#xA;            const disappearTime = Math.max(1000, 2500 - level * 150);&#xA;            &#xA;            circle.addEventListener(&#39;click&#39;, () =&gt; {&#xA;                if (gameActive) {&#xA;                    circleClicked(circle, points);&#xA;                }&#xA;            });&#xA;            &#xA;            gameArea.appendChild(circle);&#xA;            &#xA;            // Remove circle after time if not clicked&#xA;            setTimeout(() =&gt; {&#xA;                if (circle.parentNode) {&#xA;                    circle.parentNode.removeChild(circle);&#xA;                    circleMissed();&#xA;                }&#xA;            }, disappearTime);&#xA;        }&#xA;        &#xA;        // Handle circle click&#xA;        function circleClicked(circle, points) {&#xA;            // Add to score&#xA;            score += points;&#xA;            scoreElement.textContent = score;&#xA;            &#xA;            // Increase combo&#xA;            combo++;&#xA;            comboElement.textContent = combo + &#39;x&#39;;&#xA;            circlesClicked++;&#xA;            &#xA;            // Show combo text&#xA;            const comboText = document.createElement(&#39;div&#39;);&#xA;            comboText.className = &#39;combo&#39;;&#xA;            comboText.textContent = `+${points} (${combo}x Combo!)`;&#xA;            comboText.style.left = circle.style.left;&#xA;            comboText.style.top = circle.style.top;&#xA;            gameArea.appendChild(comboText);&#xA;            &#xA;            // Remove combo text after animation&#xA;            setTimeout(() =&gt; {&#xA;                if (comboText.parentNode) {&#xA;                    comboText.parentNode.removeChild(comboText);&#xA;                }&#xA;            }, 1000);&#xA;            &#xA;            // Remove circle&#xA;            circle.parentNode.removeChild(circle);&#xA;            &#xA;            // Level up every 500 points&#xA;            if (score &gt;= level * 500) {&#xA;                levelUp();&#xA;            }&#xA;            &#xA;            // Positive feedback message&#xA;            if (combo % 5 === 0) {&#xA;                messageElement.textContent = `Awesome! ${combo}x Combo!`;&#xA;                messageElement.className = &#39;message correct&#39;;&#xA;            }&#xA;        }&#xA;        &#xA;        // Handle missed circle&#xA;        function circleMissed() {&#xA;            circlesMissed++;&#xA;            &#xA;            // Reset combo when missing a circle&#xA;            if (combo &gt; 1) {&#xA;                messageElement.textContent = `Combo broken!`;&#xA;                messageElement.className = &#39;message incorrect&#39;;&#xA;            }&#xA;            &#xA;            combo = 1;&#xA;            comboElement.textContent = combo + &#39;x&#39;;&#xA;        }&#xA;        &#xA;        // Level up&#xA;        function levelUp() {&#xA;            level++;&#xA;            levelElement.textContent = level;&#xA;            messageElement.textContent = `Level ${level}! Circles are getting smaller and faster!`;&#xA;            messageElement.className = &#39;message correct&#39;;&#xA;            &#xA;            // Increase game speed&#xA;            clearInterval(circleInterval);&#xA;            const interval = Math.max(300, 1000 - level * 80);&#xA;            circleInterval = setInterval(createCircle, interval);&#xA;        }&#xA;        &#xA;        // Start the game&#xA;        function startGame() {&#xA;            if (gameActive) return;&#xA;            &#xA;            gameActive = true;&#xA;            startButton.disabled = true;&#xA;            messageElement.textContent = &#39;Click the circles quickly!&#39;;&#xA;            messageElement.className = &#39;message game-start&#39;;&#xA;            &#xA;            // Start the timer&#xA;            timer = setInterval(() =&gt; {&#xA;                timeLeft--;&#xA;                timeElement.textContent = timeLeft;&#xA;                &#xA;                if (timeLeft &lt;= 0) {&#xA;                    endGame();&#xA;                }&#xA;            }, 1000);&#xA;            &#xA;            // Start generating circles&#xA;            const initialInterval = 1000;&#xA;            circleInterval = setInterval(createCircle, initialInterval);&#xA;            &#xA;            // Create first circle immediately&#xA;            setTimeout(createCircle, 300);&#xA;        }&#xA;        &#xA;        // End the game&#xA;        function endGame() {&#xA;            gameActive = false;&#xA;            clearInterval(timer);&#xA;            clearInterval(circleInterval);&#xA;            startButton.disabled = false;&#xA;            &#xA;            const accuracy = circlesClicked + circlesMissed &gt; 0&#xA;                ? Math.round((circlesClicked / (circlesClicked + circlesMissed)) * 100)&#xA;                : 0;&#xA;            &#xA;            messageElement.innerHTML = `&#xA;                Game Over!&lt;br&gt;&#xA;                Final Score: ${score}&lt;br&gt;&#xA;                Accuracy: ${accuracy}%&#xA;            `;&#xA;            messageElement.className = &#39;message game-over&#39;;&#xA;        }&#xA;        &#xA;        // Event listeners&#xA;        startButton.addEventListener(&#39;click&#39;, startGame);&#xA;        resetButton.addEventListener(&#39;click&#39;, initGame);&#xA;        &#xA;        // Initialize the game on load&#xA;        window.onload = initGame;&#xA;    &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/color_match/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/color_match/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;&#xA;    &lt;title&gt;Color Match Challenge&lt;/title&gt;&#xA;    &lt;style&gt;&#xA;        /* Reset everything more aggressively */&#xA;        * {&#xA;            margin: 0;&#xA;            padding: 0;&#xA;            box-sizing: border-box;&#xA;            font-family: &#39;Segoe UI&#39;, Tahoma, Geneva, Verdana, sans-serif;&#xA;        }&#xA;        &#xA;        html, body {&#xA;            width: 100%;&#xA;            height: 100%;&#xA;            overflow: hidden; /* Prevent scrollbars */&#xA;        }&#xA;        &#xA;        body {&#xA;            display: flex;&#xA;            justify-content: center;&#xA;            align-items: center;&#xA;            min-height: 100vh;&#xA;            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);&#xA;            padding: 20px;&#xA;        }&#xA;        &#xA;        .game-container {&#xA;            background-color: rgba(255, 255, 255, 0.95);&#xA;            border-radius: 20px;&#xA;            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);&#xA;            padding: 30px;&#xA;            max-width: 600px;&#xA;            width: 100%;&#xA;            text-align: center;&#xA;            position: relative;&#xA;            z-index: 1000; /* Ensure it stays on top */&#xA;        }&#xA;        &#xA;        /* Rest of your CSS remains the same */&#xA;        h1 {&#xA;            color: #333;&#xA;            margin-bottom: 20px;&#xA;            font-size: 2.5rem;&#xA;            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);&#xA;        }&#xA;        &#xA;        .game-info {&#xA;            display: flex;&#xA;            justify-content: space-between;&#xA;            margin-bottom: 20px;&#xA;            font-size: 1.2rem;&#xA;            font-weight: bold;&#xA;        }&#xA;        &#xA;        .target-color {&#xA;            width: 150px;&#xA;            height: 80px;&#xA;            margin: 0 auto 20px;&#xA;            border-radius: 10px;&#xA;            border: 3px solid #333;&#xA;            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);&#xA;        }&#xA;        &#xA;        .color-grid {&#xA;            display: grid;&#xA;            grid-template-columns: repeat(3, 1fr);&#xA;            gap: 15px;&#xA;            margin: 30px 0;&#xA;        }&#xA;        &#xA;        .color-option {&#xA;            height: 120px;&#xA;            border-radius: 10px;&#xA;            cursor: pointer;&#xA;            transition: transform 0.2s, box-shadow 0.2s;&#xA;            border: 3px solid transparent;&#xA;        }&#xA;        &#xA;        .color-option:hover {&#xA;            transform: scale(1.05);&#xA;            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);&#xA;        }&#xA;        &#xA;        .controls {&#xA;            margin-top: 20px;&#xA;        }&#xA;        &#xA;        button {&#xA;            background: linear-gradient(to right, #4CAF50, #45a049);&#xA;            border: none;&#xA;            color: white;&#xA;            padding: 12px 30px;&#xA;            text-align: center;&#xA;            text-decoration: none;&#xA;            display: inline-block;&#xA;            font-size: 18px;&#xA;            margin: 10px 5px;&#xA;            cursor: pointer;&#xA;            border-radius: 50px;&#xA;            transition: all 0.3s;&#xA;            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);&#xA;        }&#xA;        &#xA;        button:hover {&#xA;            transform: translateY(-3px);&#xA;            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);&#xA;        }&#xA;        &#xA;        button:active {&#xA;            transform: translateY(1px);&#xA;        }&#xA;        &#xA;        #start-btn {&#xA;            background: linear-gradient(to right, #2196F3, #21b0f3);&#xA;        }&#xA;        &#xA;        #reset-btn {&#xA;            background: linear-gradient(to right, #f44336, #f46b36);&#xA;        }&#xA;        &#xA;        .message {&#xA;            font-size: 1.5rem;&#xA;            font-weight: bold;&#xA;            margin: 20px 0;&#xA;            min-height: 40px;&#xA;        }&#xA;        &#xA;        .correct {&#xA;            color: #4CAF50;&#xA;        }&#xA;        &#xA;        .incorrect {&#xA;            color: #f44336;&#xA;        }&#xA;        &#xA;        .game-over {&#xA;            font-size: 2rem;&#xA;            color: #f44336;&#xA;            margin: 20px 0;&#xA;        }&#xA;        &#xA;        .instructions {&#xA;            background-color: #f9f9f9;&#xA;            padding: 15px;&#xA;            border-radius: 10px;&#xA;            margin-top: 20px;&#xA;            text-align: left;&#xA;            font-size: 0.9rem;&#xA;        }&#xA;        &#xA;        @media (max-width: 500px) {&#xA;            .color-grid {&#xA;                grid-template-columns: repeat(2, 1fr);&#xA;            }&#xA;            &#xA;            h1 {&#xA;                font-size: 2rem;&#xA;            }&#xA;        }&#xA;    &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;div class=&#34;game-container&#34;&gt;&#xA;        &lt;h1&gt;Color Match Challenge&lt;/h1&gt;&#xA;        &#xA;        &lt;div class=&#34;game-info&#34;&gt;&#xA;            &lt;div&gt;Score: &lt;span id=&#34;score&#34;&gt;0&lt;/span&gt;&lt;/div&gt;&#xA;            &lt;div&gt;Time: &lt;span id=&#34;time&#34;&gt;60&lt;/span&gt;s&lt;/div&gt;&#xA;            &lt;div&gt;Level: &lt;span id=&#34;level&#34;&gt;1&lt;/span&gt;&lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;div class=&#34;target-color&#34; id=&#34;target-color&#34;&gt;&lt;/div&gt;&#xA;        &#xA;        &lt;div class=&#34;message&#34; id=&#34;message&#34;&gt;Match the color above!&lt;/div&gt;&#xA;        &#xA;        &lt;div class=&#34;color-grid&#34; id=&#34;color-grid&#34;&gt;&#xA;            &lt;!-- Color options will be generated here --&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;div class=&#34;controls&#34;&gt;&#xA;            &lt;button id=&#34;start-btn&#34;&gt;Start Game&lt;/button&gt;&#xA;            &lt;button id=&#34;reset-btn&#34;&gt;Reset Game&lt;/button&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;div class=&#34;instructions&#34;&gt;&#xA;            &lt;h3&gt;How to Play:&lt;/h3&gt;&#xA;            &lt;p&gt;Click on the square that matches the target color at the top. The game gets faster as you level up!&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/tictactoe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tictactoe/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xD;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xD;&#xA;&lt;head&gt;&#xD;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xD;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;&#xD;&#xA;    &lt;title&gt;Professional Tic Tac Toe&lt;/title&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/react@18/umd/react.development.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/react-dom@18/umd/react-dom.development.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/@babel/standalone/babel.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;style&gt;&#xD;&#xA;        * {&#xD;&#xA;            margin: 0;&#xD;&#xA;            padding: 0;&#xD;&#xA;            box-sizing: border-box;&#xD;&#xA;            font-family: &#39;Segoe UI&#39;, Tahoma, Geneva, Verdana, sans-serif;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        body {&#xD;&#xA;            background: linear-gradient(135deg, #2c3e50 0%, #1a1a1a 100%);&#xD;&#xA;            min-height: 100vh;&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            align-items: center;&#xD;&#xA;            padding: 20px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        #root {&#xD;&#xA;            width: 100%;&#xD;&#xA;            max-width: 500px;&#xD;&#xA;            margin: 0 auto;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .game-container {&#xD;&#xA;            background: rgba(35, 35, 35, 0.95);&#xD;&#xA;            border-radius: 12px;&#xD;&#xA;            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);&#xD;&#xA;            padding: 25px;&#xD;&#xA;            text-align: center;&#xD;&#xA;            border: 1px solid #444;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        h1 {&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            margin-bottom: 20px;&#xD;&#xA;            font-size: 2.2rem;&#xD;&#xA;            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);&#xD;&#xA;            font-weight: 300;&#xD;&#xA;            letter-spacing: 1px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .status {&#xD;&#xA;            font-size: 1.2rem;&#xD;&#xA;            margin-bottom: 20px;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            font-weight: 400;&#xD;&#xA;            padding: 12px;&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            background: rgba(50, 50, 50, 0.8);&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .board {&#xD;&#xA;            display: grid;&#xD;&#xA;            grid-template-columns: repeat(3, 1fr);&#xD;&#xA;            grid-gap: 8px;&#xD;&#xA;            margin: 0 auto 25px;&#xD;&#xA;            max-width: 320px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .square {&#xD;&#xA;            background: linear-gradient(145deg, #2a2a2a, #3a3a3a);&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            border-radius: 6px;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            font-size: 2.5rem;&#xD;&#xA;            font-weight: bold;&#xD;&#xA;            height: 90px;&#xD;&#xA;            width: 90px;&#xD;&#xA;            cursor: pointer;&#xD;&#xA;            transition: all 0.2s ease;&#xD;&#xA;            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .square:hover {&#xD;&#xA;            transform: translateY(-2px);&#xD;&#xA;            box-shadow: 0 5px 12px rgba(0, 0, 0, 0.3);&#xD;&#xA;            background: linear-gradient(145deg, #3a3a3a, #2a2a2a);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .square:active {&#xD;&#xA;            transform: translateY(1px);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .square.X {&#xD;&#xA;            color: #ff7a7a;&#xD;&#xA;            text-shadow: 0 0 10px rgba(255, 122, 122, 0.5);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .square.O {&#xD;&#xA;            color: #7a9fff;&#xD;&#xA;            text-shadow: 0 0 10px rgba(122, 159, 255, 0.5);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .reset-btn {&#xD;&#xA;            background: linear-gradient(145deg, #3a3a3a, #2a2a2a);&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            border-radius: 6px;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            cursor: pointer;&#xD;&#xA;            font-size: 1rem;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;            padding: 12px 30px;&#xD;&#xA;            margin-top: 10px;&#xD;&#xA;            transition: all 0.3s ease;&#xD;&#xA;            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);&#xD;&#xA;            letter-spacing: 0.5px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .reset-btn:hover {&#xD;&#xA;            transform: translateY(-2px);&#xD;&#xA;            box-shadow: 0 5px 12px rgba(0, 0, 0, 0.3);&#xD;&#xA;            background: linear-gradient(145deg, #444, #333);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .reset-btn:active {&#xD;&#xA;            transform: translateY(1px);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .winning-square {&#xD;&#xA;            animation: pulse 1.5s infinite;&#xD;&#xA;            position: relative;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .winning-square::after {&#xD;&#xA;            content: &#39;&#39;;&#xD;&#xA;            position: absolute;&#xD;&#xA;            top: -2px;&#xD;&#xA;            left: -2px;&#xD;&#xA;            right: -2px;&#xD;&#xA;            bottom: -2px;&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            background: linear-gradient(45deg, #ff7a7a, #7a9fff);&#xD;&#xA;            z-index: -1;&#xD;&#xA;            animation: border-pulse 1.5s infinite;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        @keyframes pulse {&#xD;&#xA;            0% { transform: scale(1); }&#xD;&#xA;            50% { transform: scale(1.05); }&#xD;&#xA;            100% { transform: scale(1); }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        @keyframes border-pulse {&#xD;&#xA;            0% { opacity: 0.7; }&#xD;&#xA;            50% { opacity: 1; }&#xD;&#xA;            100% { opacity: 0.7; }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-board {&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: space-around;&#xD;&#xA;            margin-top: 20px;&#xD;&#xA;            padding: 15px;&#xD;&#xA;            background: rgba(50, 50, 50, 0.8);&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score {&#xD;&#xA;            font-size: 1.1rem;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-x {&#xD;&#xA;            color: #ff7a7a;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-o {&#xD;&#xA;            color: #7a9fff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .draws {&#xD;&#xA;            color: #dddddd;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .turns-indicator {&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            margin-bottom: 15px;&#xD;&#xA;            gap: 20px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .player-indicator {&#xD;&#xA;            padding: 8px 15px;&#xD;&#xA;            border-radius: 6px;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;            background: #2a2a2a;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .active-player {&#xD;&#xA;            background: #333;&#xD;&#xA;            box-shadow: 0 0 10px rgba(122, 159, 255, 0.3);&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .instructions {&#xD;&#xA;            color: #cccccc;&#xD;&#xA;            font-size: 0.9rem;&#xD;&#xA;            margin-top: 20px;&#xD;&#xA;            padding: 10px;&#xD;&#xA;            border-top: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;    &lt;/style&gt;&#xD;&#xA;&lt;/head&gt;&#xD;&#xA;&lt;body&gt;&#xD;&#xA;    &lt;div id=&#34;root&#34;&gt;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;    &lt;script type=&#34;text/babel&#34;&gt;&#xD;&#xA;        const { useState, useEffect } = React;&#xD;&#xA;&#xD;&#xA;        const Square = ({ value, onClick, isWinning }) =&gt; {&#xD;&#xA;            return (&#xD;&#xA;                &lt;button &#xD;&#xA;                    className={`square ${value} ${isWinning ? &#39;winning-square&#39; : &#39;&#39;}`} &#xD;&#xA;                    onClick={onClick}&#xD;&#xA;                &gt;&#xD;&#xA;                    {value}&#xD;&#xA;                &lt;/button&gt;&#xD;&#xA;            );&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        const Board = () =&gt; {&#xD;&#xA;            const [squares, setSquares] = useState(Array(9).fill(null));&#xD;&#xA;            const [isXNext, setIsXNext] = useState(true);&#xD;&#xA;            const [winner, setWinner] = useState(null);&#xD;&#xA;            const [winningLine, setWinningLine] = useState([]);&#xD;&#xA;            const [scores, setScores] = useState({ X: 0, O: 0, draws: 0 });&#xD;&#xA;&#xD;&#xA;            useEffect(() =&gt; {&#xD;&#xA;                // Check for winner after each move&#xD;&#xA;                const gameWinner = calculateWinner(squares);&#xD;&#xA;                if (gameWinner) {&#xD;&#xA;                    setWinner(gameWinner.winner);&#xD;&#xA;                    setWinningLine(gameWinner.line);&#xD;&#xA;                    // Update scores&#xD;&#xA;                    setScores(prev =&gt; ({&#xD;&#xA;                        ...prev,&#xD;&#xA;                        [gameWinner.winner]: prev[gameWinner.winner] + 1&#xD;&#xA;                    }));&#xD;&#xA;                } else if (!squares.includes(null)) {&#xD;&#xA;                    setWinner(&#39;Draw&#39;);&#xD;&#xA;                    setScores(prev =&gt; ({&#xD;&#xA;                        ...prev,&#xD;&#xA;                        draws: prev.draws + 1&#xD;&#xA;                    }));&#xD;&#xA;                }&#xD;&#xA;            }, [squares]);&#xD;&#xA;&#xD;&#xA;            const calculateWinner = (squares) =&gt; {&#xD;&#xA;                const lines = [&#xD;&#xA;                    [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows&#xD;&#xA;                    [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns&#xD;&#xA;                    [0, 4, 8], [2, 4, 6]             // diagonals&#xD;&#xA;                ];&#xD;&#xA;                &#xD;&#xA;                for (let i = 0; i &lt; lines.length; i++) {&#xD;&#xA;                    const [a, b, c] = lines[i];&#xD;&#xA;                    if (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) {&#xD;&#xA;                        return {&#xD;&#xA;                            winner: squares[a],&#xD;&#xA;                            line: lines[i]&#xD;&#xA;                        };&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return null;&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            const handleClick = (i) =&gt; {&#xD;&#xA;                if (squares[i] || winner) return;&#xD;&#xA;                &#xD;&#xA;                const newSquares = squares.slice();&#xD;&#xA;                newSquares[i] = isXNext ? &#39;X&#39; : &#39;O&#39;;&#xD;&#xA;                setSquares(newSquares);&#xD;&#xA;                setIsXNext(!isXNext);&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            const resetGame = () =&gt; {&#xD;&#xA;                setSquares(Array(9).fill(null));&#xD;&#xA;                setIsXNext(true);&#xD;&#xA;                setWinner(null);&#xD;&#xA;                setWinningLine([]);&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            const renderSquare = (i) =&gt; {&#xD;&#xA;                return (&#xD;&#xA;                    &lt;Square&#xD;&#xA;                        value={squares[i]}&#xD;&#xA;                        onClick={() =&gt; handleClick(i)}&#xD;&#xA;                        isWinning={winningLine.includes(i)}&#xD;&#xA;                    /&gt;&#xD;&#xA;                );&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            const getStatus = () =&gt; {&#xD;&#xA;                if (winner === &#39;Draw&#39;) {&#xD;&#xA;                    return &#39;Game ended in a draw!&#39;;&#xD;&#xA;                } else if (winner) {&#xD;&#xA;                    return `Winner: ${winner}`;&#xD;&#xA;                } else {&#xD;&#xA;                    return `Next player: ${isXNext ? &#39;X&#39; : &#39;O&#39;}`;&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            return (&#xD;&#xA;                &lt;div className=&#34;game-container&#34;&gt;&#xD;&#xA;                    &lt;h1&gt;Tic Tac Toe&lt;/h1&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;turns-indicator&#34;&gt;&#xD;&#xA;                        &lt;div className={`player-indicator ${isXNext &amp;&amp; !winner ? &#39;active-player&#39; : &#39;&#39;}`}&gt;&#xD;&#xA;                            Player X&#xD;&#xA;                        &lt;/div&gt;&#xD;&#xA;                        &lt;div className={`player-indicator ${!isXNext &amp;&amp; !winner ? &#39;active-player&#39; : &#39;&#39;}`}&gt;&#xD;&#xA;                            Player O&#xD;&#xA;                        &lt;/div&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;status&#34;&gt;{getStatus()}&lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;board&#34;&gt;&#xD;&#xA;                        {renderSquare(0)}&#xD;&#xA;                        {renderSquare(1)}&#xD;&#xA;                        {renderSquare(2)}&#xD;&#xA;                        {renderSquare(3)}&#xD;&#xA;                        {renderSquare(4)}&#xD;&#xA;                        {renderSquare(5)}&#xD;&#xA;                        {renderSquare(6)}&#xD;&#xA;                        {renderSquare(7)}&#xD;&#xA;                        {renderSquare(8)}&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;button className=&#34;reset-btn&#34; onClick={resetGame}&gt;&#xD;&#xA;                        {winner ? &#39;New Game&#39; : &#39;Reset Board&#39;}&#xD;&#xA;                    &lt;/button&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;score-board&#34;&gt;&#xD;&#xA;                        &lt;div className=&#34;score score-x&#34;&gt;X: {scores.X}&lt;/div&gt;&#xD;&#xA;                        &lt;div className=&#34;score draws&#34;&gt;Draws: {scores.draws}&lt;/div&gt;&#xD;&#xA;                        &lt;div className=&#34;score score-o&#34;&gt;O: {scores.O}&lt;/div&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;instructions&#34;&gt;&#xD;&#xA;                        Click on a square to place your mark. Get three in a row to win!&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            );&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        const App = () =&gt; {&#xD;&#xA;            return &lt;Board /&gt;;&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        ReactDOM.createRoot(document.getElementById(&#39;root&#39;)).render(&lt;App /&gt;);&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/body&gt;&#xD;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/tictactoe_embed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tictactoe_embed/</guid>
      <description>&lt;iframe &#xD;&#xA;    src=&#34;tictactoe.html&#34; &#xD;&#xA;    width=&#34;550&#34; &#xD;&#xA;    height=&#34;800&#34; &#xD;&#xA;    frameborder=&#34;0&#34;&#xD;&#xA;    allowfullscreen&gt;&#xD;&#xA;&lt;/iframe&gt;</description>
    </item>
  </channel>
</rss>
