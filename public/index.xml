<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to My Portfolio on Kevin Douglas Delong - Software Engineer Portfolio</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Welcome to My Portfolio on Kevin Douglas Delong - Software Engineer Portfolio</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About Me</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/headshot.jpg&#34; alt=&#34;Profile Photo&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m Kevin Douglas Delong, a dedicated software engineer with expertise in backend (e.g., Node.js, Python) and front-end (e.g., React, Flutter) development. I build scalable web, mobile, and desktop applications, focusing on user-friendly designs and efficient code.&lt;/p&gt;&#xA;&lt;p&gt;Key Skills:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Web: HTML/CSS/JS, React, Next.js&lt;/li&gt;&#xA;&lt;li&gt;Mobile: Flutter, React Native&lt;/li&gt;&#xA;&lt;li&gt;Desktop: Electron, .NET&lt;/li&gt;&#xA;&lt;li&gt;Backend: Express, Django, databases (SQL/NoSQL)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Passionate about innovative solutions—let&amp;rsquo;s connect!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contact Me</title>
      <link>http://localhost:1313/contact/</link>
      <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contact/</guid>
      <description>&lt;p&gt;Reach out for collaborations, project inquiries, or source code access.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Email: &lt;a href=&#34;mailto:delong.kevin@gmail.com&#34;&gt;delong.kevin@gmail.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;LinkedIn: &lt;a href=&#34;https://www.linkedin.com/in/kevin-delong-50726135b/&#34;&gt;linkedin.com/in/kevin-delong&lt;/a&gt;  &lt;/li&gt;&#xA;&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/delongkevin&#34;&gt;github.com/delongkevin&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For source code requests, include details about the project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Donate</title>
      <link>http://localhost:1313/donate/</link>
      <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/donate/</guid>
      <description>&lt;p&gt;Support my open-source projects and development work!&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;Find me on Venmo!  &lt;a href=&#34;https://account.venmo.com/u/KDelong147&#34;&gt;https://account.venmo.com/u/KDelong147&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projects</title>
      <link>http://localhost:1313/projects/</link>
      <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/</guid>
      <description>&lt;p&gt;Explore my portfolio of web, mobile, and desktop applications. Each includes a demo embed and source code access (request permission via contact).&lt;/p&gt;&#xA;&lt;h3 id=&#34;scientific-calculator-web-app&#34;&gt;Scientific Calculator Web App!&lt;/h3&gt;&#xA;&lt;iframe src=&#34;http://localhost:1313/calculator/index.html&#34; width=&#34;100%&#34; height=&#34;400px&#34; frameborder=&#34;0&#34; allowfullscreen style=&#34;border-radius: 8px;&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;h3 id=&#34;tic-tac-toe-game&#34;&gt;Tic Tac Toe Game&lt;/h3&gt;&#xA;&lt;iframe src=&#34;http://localhost:1313/tictactoe.html&#34; width=&#34;100%&#34; height=&#34;600px&#34; frameborder=&#34;0&#34; allowfullscreen style=&#34;border-radius: 8px;&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&#xA;&lt;h3 id=&#34;blackjack-game&#34;&gt;Blackjack Game&lt;/h3&gt;&#xA;&lt;iframe src=&#34;http://localhost:1313/blackjack.html&#34; width=&#34;100%&#34; height=&#34;800px&#34; frameborder=&#34;0&#34; allowfullscreen style=&#34;border-radius: 8px;&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;h3 id=&#34;space-shooter&#34;&gt;Space Shooter&lt;/h3&gt;&#xA;echo &#39;&lt;iframe src=&#34;http://localhost:1313/space-shooter/index.html&#34; width=&#34;100%&#34; height=&#34;700px&#34; frameborder=&#34;0&#34; allowfullscreen style=&#34;border-radius: 8px;&#34;&gt;&lt;/iframe&gt;&#39; &gt; layouts/shortcodes/space-shooter.html&#xA;&#xA;&lt;p&gt;GitHub: &lt;a href=&#34;http://localhost:1313/contact/&#34;&gt;Request Source Code&lt;/a&gt;&#xA;More projects to come :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Resume</title>
      <link>http://localhost:1313/resume/</link>
      <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/resume/</guid>
      <description>&lt;p&gt;Download my latest resume and cover letter (updated September 13, 2025).&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/resume/resume.pdf&#34;&gt;Resume PDF&lt;/a&gt;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Professional Summary&#xA;Results-oriented Software Engineer with 10+ years in automotive infotainment systems, specializing in backend automation, frontend UI development, and full-stack integration for web, mobile, and embedded applications. Proven track record in C++, Python, and AutoSAR architecture, collaborating on CI/CD pipelines to deliver high-quality, secure software. Excel at debugging complex SOC/IOC issues, fuzz testing protocols (CAN/Ethernet), and leading cross-functional teams to exceed milestones—reducing defects by 25% through optimized test automation. Eager to drive innovative solutions in scalable software environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/blackjack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blackjack/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xD;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xD;&#xA;&lt;head&gt;&#xD;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xD;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;&#xD;&#xA;    &lt;title&gt;Blackjack Game&lt;/title&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/react@18/umd/react.development.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/react-dom@18/umd/react-dom.development.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/@babel/standalone/babel.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;style&gt;&#xD;&#xA;        * {&#xD;&#xA;            margin: 0;&#xD;&#xA;            padding: 0;&#xD;&#xA;            box-sizing: border-box;&#xD;&#xA;            font-family: &#39;Segoe UI&#39;, Tahoma, Geneva, Verdana, sans-serif;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        body {&#xD;&#xA;            background: linear-gradient(135deg, #2c3e50 0%, #1a1a1a 100%);&#xD;&#xA;            min-height: 100vh;&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            align-items: center;&#xD;&#xA;            padding: 20px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        #root {&#xD;&#xA;            width: 100%;&#xD;&#xA;            max-width: 600px;&#xD;&#xA;            margin: 0 auto;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .game-container {&#xD;&#xA;            background: rgba(35, 35, 35, 0.95);&#xD;&#xA;            border-radius: 12px;&#xD;&#xA;            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);&#xD;&#xA;            padding: 25px;&#xD;&#xA;            text-align: center;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        h1 {&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            margin-bottom: 20px;&#xD;&#xA;            font-size: 2.2rem;&#xD;&#xA;            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);&#xD;&#xA;            font-weight: 300;&#xD;&#xA;            letter-spacing: 1px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-board {&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: space-around;&#xD;&#xA;            margin-bottom: 20px;&#xD;&#xA;            padding: 15px;&#xD;&#xA;            background: rgba(50, 50, 50, 0.8);&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score {&#xD;&#xA;            font-size: 1.1rem;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-wins {&#xD;&#xA;            color: #7a9fff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-losses {&#xD;&#xA;            color: #ff7a7a;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-pushes {&#xD;&#xA;            color: #dddddd;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .hands-container {&#xD;&#xA;            display: flex;&#xD;&#xA;            flex-direction: column;&#xD;&#xA;            gap: 30px;&#xD;&#xA;            margin-bottom: 25px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .hand {&#xD;&#xA;            display: flex;&#xD;&#xA;            flex-direction: column;&#xD;&#xA;            align-items: center;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .hand-title {&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            font-size: 1.2rem;&#xD;&#xA;            margin-bottom: 10px;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .cards {&#xD;&#xA;            display: flex;&#xD;&#xA;            flex-wrap: wrap;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            gap: 10px;&#xD;&#xA;            min-height: 150px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .card {&#xD;&#xA;            width: 80px;&#xD;&#xA;            height: 120px;&#xD;&#xA;            background: #2a2a2a;&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            display: flex;&#xD;&#xA;            flex-direction: column;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            align-items: center;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);&#xD;&#xA;            position: relative;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .card-value {&#xD;&#xA;            font-size: 1.5rem;&#xD;&#xA;            font-weight: bold;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .card-suit {&#xD;&#xA;            font-size: 1.8rem;&#xD;&#xA;            margin-top: 5px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .heart, .diamond {&#xD;&#xA;            color: #ff7a7a;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .spade, .club {&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .hand-total {&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            font-size: 1.1rem;&#xD;&#xA;            margin-top: 10px;&#xD;&#xA;            background: rgba(50, 50, 50, 0.8);&#xD;&#xA;            padding: 5px 15px;&#xD;&#xA;            border-radius: 20px;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .message {&#xD;&#xA;            font-size: 1.3rem;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            margin: 20px 0;&#xD;&#xA;            padding: 12px;&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            background: rgba(50, 50, 50, 0.8);&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            min-height: 60px;&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            align-items: center;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .controls {&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            gap: 15px;&#xD;&#xA;            margin-bottom: 20px;&#xD;&#xA;            flex-wrap: wrap;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn {&#xD;&#xA;            background: linear-gradient(145deg, #3a3a3a, #2a2a2a);&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            border-radius: 6px;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            cursor: pointer;&#xD;&#xA;            font-size: 1rem;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;            padding: 12px 25px;&#xD;&#xA;            transition: all 0.3s ease;&#xD;&#xA;            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);&#xD;&#xA;            min-width: 120px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn:hover {&#xD;&#xA;            transform: translateY(-2px);&#xD;&#xA;            box-shadow: 0 5px 12px rgba(0, 0, 0, 0.3);&#xD;&#xA;            background: linear-gradient(145deg, #444, #333);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn:active {&#xD;&#xA;            transform: translateY(1px);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn-hit {&#xD;&#xA;            background: linear-gradient(145deg, #2a7a2a, #1f5e1f);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn-stand {&#xD;&#xA;            background: linear-gradient(145deg, #7a2a2a, #5e1f1f);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .btn-deal {&#xD;&#xA;            background: linear-gradient(145deg, #2a2a7a, #1f1f5e);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .instructions {&#xD;&#xA;            color: #cccccc;&#xD;&#xA;            font-size: 0.9rem;&#xD;&#xA;            margin-top: 25px;&#xD;&#xA;            padding: 15px;&#xD;&#xA;            border-top: 1px solid #555;&#xD;&#xA;            text-align: left;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .instructions h3 {&#xD;&#xA;            margin-bottom: 10px;&#xD;&#xA;            color: #7a9fff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .instructions ul {&#xD;&#xA;            padding-left: 20px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .instructions li {&#xD;&#xA;            margin-bottom: 5px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        @media (max-width: 500px) {&#xD;&#xA;            .card {&#xD;&#xA;                width: 70px;&#xD;&#xA;                height: 105px;&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            .btn {&#xD;&#xA;                padding: 10px 15px;&#xD;&#xA;                min-width: 100px;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &lt;/style&gt;&#xD;&#xA;&lt;/head&gt;&#xD;&#xA;&lt;body&gt;&#xD;&#xA;    &lt;div id=&#34;root&#34;&gt;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;    &lt;script type=&#34;text/babel&#34;&gt;&#xD;&#xA;        const { useState, useEffect } = React;&#xD;&#xA;&#xD;&#xA;        const Card = ({ suit, value, hidden }) =&gt; {&#xD;&#xA;            if (hidden) {&#xD;&#xA;                return (&#xD;&#xA;                    &lt;div className=&#34;card&#34;&gt;&#xD;&#xA;                        &lt;div style={{ &#xD;&#xA;                            width: &#39;100%&#39;, &#xD;&#xA;                            height: &#39;100%&#39;, &#xD;&#xA;                            background: &#39;linear-gradient(145deg, #1a1a1a, #2a2a2a)&#39;,&#xD;&#xA;                            borderRadius: &#39;7px&#39;,&#xD;&#xA;                            display: &#39;flex&#39;,&#xD;&#xA;                            justifyContent: &#39;center&#39;,&#xD;&#xA;                            alignItems: &#39;center&#39;&#xD;&#xA;                        }}&gt;&#xD;&#xA;                            &lt;div style={{&#xD;&#xA;                                width: &#39;50%&#39;,&#xD;&#xA;                                height: &#39;50%&#39;,&#xD;&#xA;                                background: &#39;#333&#39;,&#xD;&#xA;                                borderRadius: &#39;5px&#39;,&#xD;&#xA;                                border: &#39;2px solid #555&#39;&#xD;&#xA;                            }}&gt;&lt;/div&gt;&#xD;&#xA;                        &lt;/div&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                );&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return (&#xD;&#xA;                &lt;div className=&#34;card&#34;&gt;&#xD;&#xA;                    &lt;div className={`card-value ${suit}`}&gt;{value}&lt;/div&gt;&#xD;&#xA;                    &lt;div className={`card-suit ${suit}`}&gt;&#xD;&#xA;                        {suit === &#39;heart&#39; ? &#39;♥&#39; : &#xD;&#xA;                         suit === &#39;diamond&#39; ? &#39;♦&#39; : &#xD;&#xA;                         suit === &#39;club&#39; ? &#39;♣&#39; : &#39;♠&#39;}&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            );&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        const Hand = ({ cards, title, total, isDealer }) =&gt; {&#xD;&#xA;            return (&#xD;&#xA;                &lt;div className=&#34;hand&#34;&gt;&#xD;&#xA;                    &lt;div className=&#34;hand-title&#34;&gt;{title}&lt;/div&gt;&#xD;&#xA;                    &lt;div className=&#34;cards&#34;&gt;&#xD;&#xA;                        {cards.map((card, index) =&gt; (&#xD;&#xA;                            &lt;Card &#xD;&#xA;                                key={index} &#xD;&#xA;                                suit={card.suit} &#xD;&#xA;                                value={card.value} &#xD;&#xA;                                hidden={isDealer &amp;&amp; index === 0 &amp;&amp; total === 0}&#xD;&#xA;                            /&gt;&#xD;&#xA;                        ))}&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    {total &gt; 0 &amp;&amp; (&#xD;&#xA;                        &lt;div className=&#34;hand-total&#34;&gt;Total: {total}&lt;/div&gt;&#xD;&#xA;                    )}&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            );&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        const BlackjackGame = () =&gt; {&#xD;&#xA;            const [deck, setDeck] = useState([]);&#xD;&#xA;            const [playerHand, setPlayerHand] = useState([]);&#xD;&#xA;            const [dealerHand, setDealerHand] = useState([]);&#xD;&#xA;            const [playerTotal, setPlayerTotal] = useState(0);&#xD;&#xA;            const [dealerTotal, setDealerTotal] = useState(0);&#xD;&#xA;            const [gameStatus, setGameStatus] = useState(&#39;waiting&#39;); // waiting, player-turn, dealer-turn, win, lose, push&#xD;&#xA;            const [message, setMessage] = useState(&#39;Place your bet and deal cards&#39;);&#xD;&#xA;            const [score, setScore] = useState({ wins: 0, losses: 0, pushes: 0 });&#xD;&#xA;&#xD;&#xA;            // Initialize a deck of cards&#xD;&#xA;            const initializeDeck = () =&gt; {&#xD;&#xA;                const suits = [&#39;heart&#39;, &#39;diamond&#39;, &#39;club&#39;, &#39;spade&#39;];&#xD;&#xA;                const values = [&#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;J&#39;, &#39;Q&#39;, &#39;K&#39;, &#39;A&#39;];&#xD;&#xA;                const newDeck = [];&#xD;&#xA;                &#xD;&#xA;                for (let suit of suits) {&#xD;&#xA;                    for (let value of values) {&#xD;&#xA;                        newDeck.push({ suit, value });&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                &#xD;&#xA;                return shuffleDeck(newDeck);&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Shuffle the deck using Fisher-Yates algorithm&#xD;&#xA;            const shuffleDeck = (deck) =&gt; {&#xD;&#xA;                const newDeck = [...deck];&#xD;&#xA;                for (let i = newDeck.length - 1; i &gt; 0; i--) {&#xD;&#xA;                    const j = Math.floor(Math.random() * (i + 1));&#xD;&#xA;                    [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];&#xD;&#xA;                }&#xD;&#xA;                return newDeck;&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Calculate the total value of a hand&#xD;&#xA;            const calculateTotal = (hand) =&gt; {&#xD;&#xA;                let total = 0;&#xD;&#xA;                let aces = 0;&#xD;&#xA;                &#xD;&#xA;                for (let card of hand) {&#xD;&#xA;                    if (card.value === &#39;A&#39;) {&#xD;&#xA;                        aces += 1;&#xD;&#xA;                        total += 11;&#xD;&#xA;                    } else if ([&#39;K&#39;, &#39;Q&#39;, &#39;J&#39;].includes(card.value)) {&#xD;&#xA;                        total += 10;&#xD;&#xA;                    } else {&#xD;&#xA;                        total += parseInt(card.value);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                &#xD;&#xA;                // Adjust for aces&#xD;&#xA;                while (total &gt; 21 &amp;&amp; aces &gt; 0) {&#xD;&#xA;                    total -= 10;&#xD;&#xA;                    aces -= 1;&#xD;&#xA;                }&#xD;&#xA;                &#xD;&#xA;                return total;&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Deal initial cards&#xD;&#xA;            const dealCards = () =&gt; {&#xD;&#xA;                const newDeck = initializeDeck();&#xD;&#xA;                const playerCards = [newDeck.pop(), newDeck.pop()];&#xD;&#xA;                const dealerCards = [newDeck.pop(), newDeck.pop()];&#xD;&#xA;                &#xD;&#xA;                setDeck(newDeck);&#xD;&#xA;                setPlayerHand(playerCards);&#xD;&#xA;                setDealerHand(dealerCards);&#xD;&#xA;                &#xD;&#xA;                const playerTotalValue = calculateTotal(playerCards);&#xD;&#xA;                const dealerTotalValue = calculateTotal([dealerCards[0]]); // Only show first card for dealer&#xD;&#xA;                &#xD;&#xA;                setPlayerTotal(playerTotalValue);&#xD;&#xA;                setDealerTotal(dealerTotalValue);&#xD;&#xA;                setGameStatus(&#39;player-turn&#39;);&#xD;&#xA;                setMessage(&#39;Your turn! Hit or Stand?&#39;);&#xD;&#xA;                &#xD;&#xA;                // Check for blackjack&#xD;&#xA;                if (playerTotalValue === 21) {&#xD;&#xA;                    setTimeout(stand, 1000);&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Player draws a card&#xD;&#xA;            const hit = () =&gt; {&#xD;&#xA;                if (gameStatus !== &#39;player-turn&#39;) return;&#xD;&#xA;                &#xD;&#xA;                const newDeck = [...deck];&#xD;&#xA;                const newCard = newDeck.pop();&#xD;&#xA;                const newPlayerHand = [...playerHand, newCard];&#xD;&#xA;                const newPlayerTotal = calculateTotal(newPlayerHand);&#xD;&#xA;                &#xD;&#xA;                setDeck(newDeck);&#xD;&#xA;                setPlayerHand(newPlayerHand);&#xD;&#xA;                setPlayerTotal(newPlayerTotal);&#xD;&#xA;                &#xD;&#xA;                if (newPlayerTotal &gt; 21) {&#xD;&#xA;                    setGameStatus(&#39;lose&#39;);&#xD;&#xA;                    setMessage(&#39;Busted! You lose.&#39;);&#xD;&#xA;                    setScore({ ...score, losses: score.losses + 1 });&#xD;&#xA;                } else if (newPlayerTotal === 21) {&#xD;&#xA;                    setTimeout(stand, 500);&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Player ends their turn&#xD;&#xA;            const stand = () =&gt; {&#xD;&#xA;                if (gameStatus !== &#39;player-turn&#39;) return;&#xD;&#xA;                &#xD;&#xA;                setGameStatus(&#39;dealer-turn&#39;);&#xD;&#xA;                setMessage(&#34;Dealer&#39;s turn&#34;);&#xD;&#xA;                &#xD;&#xA;                // Reveal dealer&#39;s hidden card after a short delay&#xD;&#xA;                setTimeout(() =&gt; {&#xD;&#xA;                    const newDealerTotal = calculateTotal(dealerHand);&#xD;&#xA;                    setDealerTotal(newDealerTotal);&#xD;&#xA;                    &#xD;&#xA;                    let currentDeck = [...deck];&#xD;&#xA;                    let currentDealerHand = [...dealerHand];&#xD;&#xA;                    let currentDealerTotal = newDealerTotal;&#xD;&#xA;                    &#xD;&#xA;                    // Dealer draws until they have at least 17&#xD;&#xA;                    const dealerDraw = () =&gt; {&#xD;&#xA;                        if (currentDealerTotal &lt; 17) {&#xD;&#xA;                            setTimeout(() =&gt; {&#xD;&#xA;                                const newCard = currentDeck.pop();&#xD;&#xA;                                currentDealerHand.push(newCard);&#xD;&#xA;                                currentDealerTotal = calculateTotal(currentDealerHand);&#xD;&#xA;                                &#xD;&#xA;                                setDeck(currentDeck);&#xD;&#xA;                                setDealerHand(currentDealerHand);&#xD;&#xA;                                setDealerTotal(currentDealerTotal);&#xD;&#xA;                                &#xD;&#xA;                                dealerDraw();&#xD;&#xA;                            }, 800);&#xD;&#xA;                        } else {&#xD;&#xA;                            // Determine winner after dealer finishes drawing&#xD;&#xA;                            setTimeout(determineWinner, 500);&#xD;&#xA;                        }&#xD;&#xA;                    };&#xD;&#xA;                    &#xD;&#xA;                    dealerDraw();&#xD;&#xA;                }, 800);&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Determine the winner&#xD;&#xA;            const determineWinner = () =&gt; {&#xD;&#xA;                if (dealerTotal &gt; 21) {&#xD;&#xA;                    setGameStatus(&#39;win&#39;);&#xD;&#xA;                    setMessage(&#39;Dealer busts! You win!&#39;);&#xD;&#xA;                    setScore({ ...score, wins: score.wins + 1 });&#xD;&#xA;                } else if (dealerTotal &gt; playerTotal) {&#xD;&#xA;                    setGameStatus(&#39;lose&#39;);&#xD;&#xA;                    setMessage(&#39;Dealer wins!&#39;);&#xD;&#xA;                    setScore({ ...score, losses: score.losses + 1 });&#xD;&#xA;                } else if (dealerTotal &lt; playerTotal) {&#xD;&#xA;                    setGameStatus(&#39;win&#39;);&#xD;&#xA;                    setMessage(&#39;You win!&#39;);&#xD;&#xA;                    setScore({ ...score, wins: score.wins + 1 });&#xD;&#xA;                } else {&#xD;&#xA;                    setGameStatus(&#39;push&#39;);&#xD;&#xA;                    setMessage(&#34;It&#39;s a push!&#34;);&#xD;&#xA;                    setScore({ ...score, pushes: score.pushes + 1 });&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            // Start a new game&#xD;&#xA;            const newGame = () =&gt; {&#xD;&#xA;                setPlayerHand([]);&#xD;&#xA;                setDealerHand([]);&#xD;&#xA;                setPlayerTotal(0);&#xD;&#xA;                setDealerTotal(0);&#xD;&#xA;                setGameStatus(&#39;waiting&#39;);&#xD;&#xA;                setMessage(&#39;Place your bet and deal cards&#39;);&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            return (&#xD;&#xA;                &lt;div className=&#34;game-container&#34;&gt;&#xD;&#xA;                    &lt;h1&gt;Blackjack&lt;/h1&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;score-board&#34;&gt;&#xD;&#xA;                        &lt;div className=&#34;score score-wins&#34;&gt;Wins: {score.wins}&lt;/div&gt;&#xD;&#xA;                        &lt;div className=&#34;score score-losses&#34;&gt;Losses: {score.losses}&lt;/div&gt;&#xD;&#xA;                        &lt;div className=&#34;score score-pushes&#34;&gt;Pushes: {score.pushes}&lt;/div&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;hands-container&#34;&gt;&#xD;&#xA;                        &lt;Hand &#xD;&#xA;                            cards={dealerHand} &#xD;&#xA;                            title=&#34;Dealer&#34; &#xD;&#xA;                            total={gameStatus !== &#39;player-turn&#39; ? dealerTotal : 0}&#xD;&#xA;                            isDealer={gameStatus === &#39;player-turn&#39;}&#xD;&#xA;                        /&gt;&#xD;&#xA;                        &#xD;&#xA;                        &lt;Hand &#xD;&#xA;                            cards={playerHand} &#xD;&#xA;                            title=&#34;Player&#34; &#xD;&#xA;                            total={playerTotal}&#xD;&#xA;                            isDealer={false}&#xD;&#xA;                        /&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;message&#34;&gt;{message}&lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;controls&#34;&gt;&#xD;&#xA;                        {gameStatus === &#39;waiting&#39; ? (&#xD;&#xA;                            &lt;button className=&#34;btn btn-deal&#34; onClick={dealCards}&gt;&#xD;&#xA;                                Deal Cards&#xD;&#xA;                            &lt;/button&gt;&#xD;&#xA;                        ) : gameStatus === &#39;player-turn&#39; ? (&#xD;&#xA;                            &lt;&gt;&#xD;&#xA;                                &lt;button className=&#34;btn btn-hit&#34; onClick={hit}&gt;&#xD;&#xA;                                    Hit&#xD;&#xA;                                &lt;/button&gt;&#xD;&#xA;                                &lt;button className=&#34;btn btn-stand&#34; onClick={stand}&gt;&#xD;&#xA;                                    Stand&#xD;&#xA;                                &lt;/button&gt;&#xD;&#xA;                            &lt;/&gt;&#xD;&#xA;                        ) : (&#xD;&#xA;                            &lt;button className=&#34;btn btn-deal&#34; onClick={newGame}&gt;&#xD;&#xA;                                New Game&#xD;&#xA;                            &lt;/button&gt;&#xD;&#xA;                        )}&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;instructions&#34;&gt;&#xD;&#xA;                        &lt;h3&gt;How to Play:&lt;/h3&gt;&#xD;&#xA;                        &lt;ul&gt;&#xD;&#xA;                            &lt;li&gt;Try to get as close to 21 as possible without going over&lt;/li&gt;&#xD;&#xA;                            &lt;li&gt;Dealer must hit until they reach at least 17&lt;/li&gt;&#xD;&#xA;                            &lt;li&gt;Aces count as 1 or 11&lt;/li&gt;&#xD;&#xA;                            &lt;li&gt;Face cards (J, Q, K) are worth 10&lt;/li&gt;&#xD;&#xA;                        &lt;/ul&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            );&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        ReactDOM.createRoot(document.getElementById(&#39;root&#39;)).render(&lt;BlackjackGame /&gt;);&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/body&gt;&#xD;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/blackjack_embed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blackjack_embed/</guid>
      <description>&lt;iframe &#xD;&#xA;    src=&#34;blackjack.html&#34; &#xD;&#xA;    width=&#34;650&#34; &#xD;&#xA;    height=&#34;800&#34; &#xD;&#xA;    frameborder=&#34;0&#34;&#xD;&#xA;    style=&#34;border: none; border-radius: 12px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);&#34;&#xD;&#xA;    allowfullscreen&gt;&#xD;&#xA;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/build/</guid>
      <description>&lt;!doctype html&gt;&lt;html lang=&#34;en&#34;&gt;&lt;head&gt;&lt;meta charset=&#34;utf-8&#34;/&gt;&lt;link rel=&#34;icon&#34; href=&#34;http://localhost:1313/favicon.ico&#34;/&gt;&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width,initial-scale=1&#34;/&gt;&lt;meta name=&#34;theme-color&#34; content=&#34;#000000&#34;/&gt;&lt;meta name=&#34;description&#34; content=&#34;Web site created using create-react-app&#34;/&gt;&lt;link rel=&#34;apple-touch-icon&#34; href=&#34;http://localhost:1313/logo192.png&#34;/&gt;&lt;link rel=&#34;manifest&#34; href=&#34;http://localhost:1313/manifest.json&#34;/&gt;&lt;title&gt;React App&lt;/title&gt;&lt;script defer=&#34;defer&#34; src=&#34;http://localhost:1313/static/js/main.0ea5d40a.js&#34;&gt;&lt;/script&gt;&lt;link href=&#34;http://localhost:1313/static/css/main.4572f46e.css&#34; rel=&#34;stylesheet&#34;&gt;&lt;/head&gt;&lt;body&gt;&lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt;&lt;div id=&#34;root&#34;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/tictactoe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tictactoe/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xD;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xD;&#xA;&lt;head&gt;&#xD;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xD;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;&#xD;&#xA;    &lt;title&gt;Professional Tic Tac Toe&lt;/title&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/react@18/umd/react.development.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/react-dom@18/umd/react-dom.development.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;script src=&#34;https://unpkg.com/@babel/standalone/babel.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &lt;style&gt;&#xD;&#xA;        * {&#xD;&#xA;            margin: 0;&#xD;&#xA;            padding: 0;&#xD;&#xA;            box-sizing: border-box;&#xD;&#xA;            font-family: &#39;Segoe UI&#39;, Tahoma, Geneva, Verdana, sans-serif;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        body {&#xD;&#xA;            background: linear-gradient(135deg, #2c3e50 0%, #1a1a1a 100%);&#xD;&#xA;            min-height: 100vh;&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            align-items: center;&#xD;&#xA;            padding: 20px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        #root {&#xD;&#xA;            width: 100%;&#xD;&#xA;            max-width: 500px;&#xD;&#xA;            margin: 0 auto;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .game-container {&#xD;&#xA;            background: rgba(35, 35, 35, 0.95);&#xD;&#xA;            border-radius: 12px;&#xD;&#xA;            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);&#xD;&#xA;            padding: 25px;&#xD;&#xA;            text-align: center;&#xD;&#xA;            border: 1px solid #444;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        h1 {&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            margin-bottom: 20px;&#xD;&#xA;            font-size: 2.2rem;&#xD;&#xA;            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);&#xD;&#xA;            font-weight: 300;&#xD;&#xA;            letter-spacing: 1px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .status {&#xD;&#xA;            font-size: 1.2rem;&#xD;&#xA;            margin-bottom: 20px;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            font-weight: 400;&#xD;&#xA;            padding: 12px;&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            background: rgba(50, 50, 50, 0.8);&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .board {&#xD;&#xA;            display: grid;&#xD;&#xA;            grid-template-columns: repeat(3, 1fr);&#xD;&#xA;            grid-gap: 8px;&#xD;&#xA;            margin: 0 auto 25px;&#xD;&#xA;            max-width: 320px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .square {&#xD;&#xA;            background: linear-gradient(145deg, #2a2a2a, #3a3a3a);&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            border-radius: 6px;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            font-size: 2.5rem;&#xD;&#xA;            font-weight: bold;&#xD;&#xA;            height: 90px;&#xD;&#xA;            width: 90px;&#xD;&#xA;            cursor: pointer;&#xD;&#xA;            transition: all 0.2s ease;&#xD;&#xA;            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .square:hover {&#xD;&#xA;            transform: translateY(-2px);&#xD;&#xA;            box-shadow: 0 5px 12px rgba(0, 0, 0, 0.3);&#xD;&#xA;            background: linear-gradient(145deg, #3a3a3a, #2a2a2a);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .square:active {&#xD;&#xA;            transform: translateY(1px);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .square.X {&#xD;&#xA;            color: #ff7a7a;&#xD;&#xA;            text-shadow: 0 0 10px rgba(255, 122, 122, 0.5);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .square.O {&#xD;&#xA;            color: #7a9fff;&#xD;&#xA;            text-shadow: 0 0 10px rgba(122, 159, 255, 0.5);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .reset-btn {&#xD;&#xA;            background: linear-gradient(145deg, #3a3a3a, #2a2a2a);&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            border-radius: 6px;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;            cursor: pointer;&#xD;&#xA;            font-size: 1rem;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;            padding: 12px 30px;&#xD;&#xA;            margin-top: 10px;&#xD;&#xA;            transition: all 0.3s ease;&#xD;&#xA;            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);&#xD;&#xA;            letter-spacing: 0.5px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .reset-btn:hover {&#xD;&#xA;            transform: translateY(-2px);&#xD;&#xA;            box-shadow: 0 5px 12px rgba(0, 0, 0, 0.3);&#xD;&#xA;            background: linear-gradient(145deg, #444, #333);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .reset-btn:active {&#xD;&#xA;            transform: translateY(1px);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .winning-square {&#xD;&#xA;            animation: pulse 1.5s infinite;&#xD;&#xA;            position: relative;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .winning-square::after {&#xD;&#xA;            content: &#39;&#39;;&#xD;&#xA;            position: absolute;&#xD;&#xA;            top: -2px;&#xD;&#xA;            left: -2px;&#xD;&#xA;            right: -2px;&#xD;&#xA;            bottom: -2px;&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            background: linear-gradient(45deg, #ff7a7a, #7a9fff);&#xD;&#xA;            z-index: -1;&#xD;&#xA;            animation: border-pulse 1.5s infinite;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        @keyframes pulse {&#xD;&#xA;            0% { transform: scale(1); }&#xD;&#xA;            50% { transform: scale(1.05); }&#xD;&#xA;            100% { transform: scale(1); }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        @keyframes border-pulse {&#xD;&#xA;            0% { opacity: 0.7; }&#xD;&#xA;            50% { opacity: 1; }&#xD;&#xA;            100% { opacity: 0.7; }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-board {&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: space-around;&#xD;&#xA;            margin-top: 20px;&#xD;&#xA;            padding: 15px;&#xD;&#xA;            background: rgba(50, 50, 50, 0.8);&#xD;&#xA;            border-radius: 8px;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score {&#xD;&#xA;            font-size: 1.1rem;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-x {&#xD;&#xA;            color: #ff7a7a;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .score-o {&#xD;&#xA;            color: #7a9fff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .draws {&#xD;&#xA;            color: #dddddd;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .turns-indicator {&#xD;&#xA;            display: flex;&#xD;&#xA;            justify-content: center;&#xD;&#xA;            margin-bottom: 15px;&#xD;&#xA;            gap: 20px;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .player-indicator {&#xD;&#xA;            padding: 8px 15px;&#xD;&#xA;            border-radius: 6px;&#xD;&#xA;            font-weight: 500;&#xD;&#xA;            background: #2a2a2a;&#xD;&#xA;            border: 1px solid #555;&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .active-player {&#xD;&#xA;            background: #333;&#xD;&#xA;            box-shadow: 0 0 10px rgba(122, 159, 255, 0.3);&#xD;&#xA;            color: #ffffff;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        .instructions {&#xD;&#xA;            color: #cccccc;&#xD;&#xA;            font-size: 0.9rem;&#xD;&#xA;            margin-top: 20px;&#xD;&#xA;            padding: 10px;&#xD;&#xA;            border-top: 1px solid #555;&#xD;&#xA;        }&#xD;&#xA;    &lt;/style&gt;&#xD;&#xA;&lt;/head&gt;&#xD;&#xA;&lt;body&gt;&#xD;&#xA;    &lt;div id=&#34;root&#34;&gt;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;    &lt;script type=&#34;text/babel&#34;&gt;&#xD;&#xA;        const { useState, useEffect } = React;&#xD;&#xA;&#xD;&#xA;        const Square = ({ value, onClick, isWinning }) =&gt; {&#xD;&#xA;            return (&#xD;&#xA;                &lt;button &#xD;&#xA;                    className={`square ${value} ${isWinning ? &#39;winning-square&#39; : &#39;&#39;}`} &#xD;&#xA;                    onClick={onClick}&#xD;&#xA;                &gt;&#xD;&#xA;                    {value}&#xD;&#xA;                &lt;/button&gt;&#xD;&#xA;            );&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        const Board = () =&gt; {&#xD;&#xA;            const [squares, setSquares] = useState(Array(9).fill(null));&#xD;&#xA;            const [isXNext, setIsXNext] = useState(true);&#xD;&#xA;            const [winner, setWinner] = useState(null);&#xD;&#xA;            const [winningLine, setWinningLine] = useState([]);&#xD;&#xA;            const [scores, setScores] = useState({ X: 0, O: 0, draws: 0 });&#xD;&#xA;&#xD;&#xA;            useEffect(() =&gt; {&#xD;&#xA;                // Check for winner after each move&#xD;&#xA;                const gameWinner = calculateWinner(squares);&#xD;&#xA;                if (gameWinner) {&#xD;&#xA;                    setWinner(gameWinner.winner);&#xD;&#xA;                    setWinningLine(gameWinner.line);&#xD;&#xA;                    // Update scores&#xD;&#xA;                    setScores(prev =&gt; ({&#xD;&#xA;                        ...prev,&#xD;&#xA;                        [gameWinner.winner]: prev[gameWinner.winner] + 1&#xD;&#xA;                    }));&#xD;&#xA;                } else if (!squares.includes(null)) {&#xD;&#xA;                    setWinner(&#39;Draw&#39;);&#xD;&#xA;                    setScores(prev =&gt; ({&#xD;&#xA;                        ...prev,&#xD;&#xA;                        draws: prev.draws + 1&#xD;&#xA;                    }));&#xD;&#xA;                }&#xD;&#xA;            }, [squares]);&#xD;&#xA;&#xD;&#xA;            const calculateWinner = (squares) =&gt; {&#xD;&#xA;                const lines = [&#xD;&#xA;                    [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows&#xD;&#xA;                    [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns&#xD;&#xA;                    [0, 4, 8], [2, 4, 6]             // diagonals&#xD;&#xA;                ];&#xD;&#xA;                &#xD;&#xA;                for (let i = 0; i &lt; lines.length; i++) {&#xD;&#xA;                    const [a, b, c] = lines[i];&#xD;&#xA;                    if (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) {&#xD;&#xA;                        return {&#xD;&#xA;                            winner: squares[a],&#xD;&#xA;                            line: lines[i]&#xD;&#xA;                        };&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return null;&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            const handleClick = (i) =&gt; {&#xD;&#xA;                if (squares[i] || winner) return;&#xD;&#xA;                &#xD;&#xA;                const newSquares = squares.slice();&#xD;&#xA;                newSquares[i] = isXNext ? &#39;X&#39; : &#39;O&#39;;&#xD;&#xA;                setSquares(newSquares);&#xD;&#xA;                setIsXNext(!isXNext);&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            const resetGame = () =&gt; {&#xD;&#xA;                setSquares(Array(9).fill(null));&#xD;&#xA;                setIsXNext(true);&#xD;&#xA;                setWinner(null);&#xD;&#xA;                setWinningLine([]);&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            const renderSquare = (i) =&gt; {&#xD;&#xA;                return (&#xD;&#xA;                    &lt;Square&#xD;&#xA;                        value={squares[i]}&#xD;&#xA;                        onClick={() =&gt; handleClick(i)}&#xD;&#xA;                        isWinning={winningLine.includes(i)}&#xD;&#xA;                    /&gt;&#xD;&#xA;                );&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            const getStatus = () =&gt; {&#xD;&#xA;                if (winner === &#39;Draw&#39;) {&#xD;&#xA;                    return &#39;Game ended in a draw!&#39;;&#xD;&#xA;                } else if (winner) {&#xD;&#xA;                    return `Winner: ${winner}`;&#xD;&#xA;                } else {&#xD;&#xA;                    return `Next player: ${isXNext ? &#39;X&#39; : &#39;O&#39;}`;&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;&#xD;&#xA;            return (&#xD;&#xA;                &lt;div className=&#34;game-container&#34;&gt;&#xD;&#xA;                    &lt;h1&gt;Tic Tac Toe&lt;/h1&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;turns-indicator&#34;&gt;&#xD;&#xA;                        &lt;div className={`player-indicator ${isXNext &amp;&amp; !winner ? &#39;active-player&#39; : &#39;&#39;}`}&gt;&#xD;&#xA;                            Player X&#xD;&#xA;                        &lt;/div&gt;&#xD;&#xA;                        &lt;div className={`player-indicator ${!isXNext &amp;&amp; !winner ? &#39;active-player&#39; : &#39;&#39;}`}&gt;&#xD;&#xA;                            Player O&#xD;&#xA;                        &lt;/div&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;status&#34;&gt;{getStatus()}&lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;board&#34;&gt;&#xD;&#xA;                        {renderSquare(0)}&#xD;&#xA;                        {renderSquare(1)}&#xD;&#xA;                        {renderSquare(2)}&#xD;&#xA;                        {renderSquare(3)}&#xD;&#xA;                        {renderSquare(4)}&#xD;&#xA;                        {renderSquare(5)}&#xD;&#xA;                        {renderSquare(6)}&#xD;&#xA;                        {renderSquare(7)}&#xD;&#xA;                        {renderSquare(8)}&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;button className=&#34;reset-btn&#34; onClick={resetGame}&gt;&#xD;&#xA;                        {winner ? &#39;New Game&#39; : &#39;Reset Board&#39;}&#xD;&#xA;                    &lt;/button&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;score-board&#34;&gt;&#xD;&#xA;                        &lt;div className=&#34;score score-x&#34;&gt;X: {scores.X}&lt;/div&gt;&#xD;&#xA;                        &lt;div className=&#34;score draws&#34;&gt;Draws: {scores.draws}&lt;/div&gt;&#xD;&#xA;                        &lt;div className=&#34;score score-o&#34;&gt;O: {scores.O}&lt;/div&gt;&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                    &#xD;&#xA;                    &lt;div className=&#34;instructions&#34;&gt;&#xD;&#xA;                        Click on a square to place your mark. Get three in a row to win!&#xD;&#xA;                    &lt;/div&gt;&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            );&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        const App = () =&gt; {&#xD;&#xA;            return &lt;Board /&gt;;&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        ReactDOM.createRoot(document.getElementById(&#39;root&#39;)).render(&lt;App /&gt;);&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/body&gt;&#xD;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/tictactoe_embed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tictactoe_embed/</guid>
      <description>&lt;iframe &#xD;&#xA;    src=&#34;tictactoe.html&#34; &#xD;&#xA;    width=&#34;550&#34; &#xD;&#xA;    height=&#34;800&#34; &#xD;&#xA;    frameborder=&#34;0&#34;&#xD;&#xA;    allowfullscreen&gt;&#xD;&#xA;&lt;/iframe&gt;</description>
    </item>
  </channel>
</rss>
